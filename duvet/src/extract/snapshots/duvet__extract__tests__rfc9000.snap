---
source: src/extract/tests.rs
expression: results
---
[
    (
        "section-2.1",
        Feature {
            level: Must,
            quote: [
                "A QUIC",
                "endpoint MUST NOT reuse a stream ID within a connection.",
            ],
        },
    ),
    (
        "section-2.2",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST be able to deliver stream data to an application as an",
                "ordered byte stream.",
            ],
        },
    ),
    (
        "section-2.2",
        Feature {
            level: May,
            quote: [
                "However, implementations MAY choose to offer the ability to",
                "deliver data out of order to a receiving application.",
            ],
        },
    ),
    (
        "section-2.2",
        Feature {
            level: Must,
            quote: [
                "The data at a given offset MUST NOT change if it is sent",
                "multiple times; an endpoint MAY treat receipt of different data at",
                "the same offset within a stream as a connection error of type",
                "PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-2.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send data on any stream without ensuring that it",
                "is within the flow control limits set by its peer.",
            ],
        },
    ),
    (
        "section-2.3",
        Feature {
            level: Should,
            quote: [
                "A QUIC implementation SHOULD provide ways in which an application can",
                "indicate the relative priority of streams.",
            ],
        },
    ),
    (
        "section-3.1",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY send a RESET_STREAM as the first frame that mentions",
                "a stream; this causes the sending part of that stream to open and",
                "then immediately transition to the \"Reset Sent\" state.",
            ],
        },
    ),
    (
        "section-3.2",
        Feature {
            level: Must,
            quote: [
                "Before a stream is created, all streams of the same type with lower-",
                "numbered stream IDs MUST be created.",
            ],
        },
    ),
    (
        "section-3.2",
        Feature {
            level: May,
            quote: [
                "An",
                "implementation MAY interrupt delivery of stream data, discard any",
                "data that was not consumed, and signal the receipt of the",
                "RESET_STREAM.",
            ],
        },
    ),
    (
        "section-3.3",
        Feature {
            level: Must,
            quote: [
                "A sender MUST NOT send any of these frames from a terminal state",
                "(\"Data Recvd\" or \"Reset Recvd\").",
            ],
        },
    ),
    (
        "section-3.3",
        Feature {
            level: Must,
            quote: [
                "A sender MUST NOT send a STREAM or",
                "STREAM_DATA_BLOCKED frame for a stream in the \"Reset Sent\" state or",
                "any terminal state -- that is, after sending a RESET_STREAM frame.",
            ],
        },
    ),
    (
        "section-3.3",
        Feature {
            level: May,
            quote: [
                "A receiver MAY send a STOP_SENDING frame in any state where it has",
                "not received a RESET_STREAM frame -- that is, states other than",
                "\"Reset Recvd\" or \"Reset Read\".",
            ],
        },
    ),
    (
        "section-3.5",
        Feature {
            level: Should,
            quote: [
                "If the stream is in the \"Recv\" or \"Size Known\" state, the transport",
                "SHOULD signal this by sending a STOP_SENDING frame to prompt closure",
                "of the stream in the opposite direction.",
            ],
        },
    ),
    (
        "section-3.5",
        Feature {
            level: Must,
            quote: [
                "An endpoint that receives a STOP_SENDING frame",
                "MUST send a RESET_STREAM frame if the stream is in the \"Ready\" or",
                "\"Send\" state.",
            ],
        },
    ),
    (
        "section-3.5",
        Feature {
            level: May,
            quote: [
                "If the stream is in the \"Data Sent\" state, the",
                "endpoint MAY defer sending the RESET_STREAM frame until the packets",
                "containing outstanding data are acknowledged or declared lost.",
            ],
        },
    ),
    (
        "section-3.5",
        Feature {
            level: Should,
            quote: [
                "If",
                "any outstanding data is declared lost, the endpoint SHOULD send a",
                "RESET_STREAM frame instead of retransmitting the data.",
            ],
        },
    ),
    (
        "section-3.5",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD copy the error code from the STOP_SENDING frame to",
                "the RESET_STREAM frame it sends, but it can use any application error",
                "code.",
            ],
        },
    ),
    (
        "section-3.5",
        Feature {
            level: May,
            quote: [
                "An endpoint that sends a STOP_SENDING frame MAY ignore the",
                "error code in any RESET_STREAM frames subsequently received for that",
                "stream.",
            ],
        },
    ),
    (
        "section-3.5",
        Feature {
            level: Should,
            quote: [
                "STOP_SENDING SHOULD only be sent for a stream that has not been reset",
                "by the peer.",
            ],
        },
    ),
    (
        "section-4",
        Feature {
            level: Should,
            quote: [
                "To avoid excessive buffering at multiple layers, QUIC implementations",
                "SHOULD provide an interface for the cryptographic protocol",
                "implementation to communicate its buffering limits.",
            ],
        },
    ),
    (
        "section-4.1",
        Feature {
            level: Must,
            quote: [
                "Senders MUST NOT send data in excess of either limit.",
            ],
        },
    ),
    (
        "section-4.1",
        Feature {
            level: Must,
            quote: [
                "A receiver MUST close the connection with an error of type",
                "FLOW_CONTROL_ERROR if the sender violates the advertised connection",
                "or stream data limits; see Section 11 for details on error handling.",
            ],
        },
    ),
    (
        "section-4.1",
        Feature {
            level: Must,
            quote: [
                "A sender MUST ignore any MAX_STREAM_DATA or MAX_DATA frames that do",
                "not increase flow control limits.",
            ],
        },
    ),
    (
        "section-4.1",
        Feature {
            level: Should,
            quote: [
                "A sender SHOULD send a",
                "STREAM_DATA_BLOCKED or DATA_BLOCKED frame to indicate to the receiver",
                "that it has data to write but is blocked by flow control limits.",
            ],
        },
    ),
    (
        "section-4.1",
        Feature {
            level: Should,
            quote: [
                "To keep the",
                "connection from closing, a sender that is flow control limited SHOULD",
                "periodically send a STREAM_DATA_BLOCKED or DATA_BLOCKED frame when it",
                "has no ack-eliciting packets in flight.",
            ],
        },
    ),
    (
        "section-4.2",
        Feature {
            level: May,
            quote: [
                "To avoid blocking a sender, a receiver MAY send a MAX_STREAM_DATA or",
                "MAX_DATA frame multiple times within a round trip or send it early",
                "enough to allow time for loss of the frame and subsequent recovery.",
            ],
        },
    ),
    (
        "section-4.2",
        Feature {
            level: Must,
            quote: [
                "Therefore, a receiver MUST NOT wait for a",
                "STREAM_DATA_BLOCKED or DATA_BLOCKED frame before sending a",
                "MAX_STREAM_DATA or MAX_DATA frame; doing so could result in the",
                "sender being blocked for the rest of the connection.",
            ],
        },
    ),
    (
        "section-4.4",
        Feature {
            level: Must,
            quote: [
                "Both endpoints MUST maintain flow control state",
                "for the stream in the unterminated direction until that direction",
                "enters a terminal state.",
            ],
        },
    ),
    (
        "section-4.5",
        Feature {
            level: Must,
            quote: [
                "The receiver MUST use the final size of the stream to",
                "account for all bytes sent on the stream in its connection-level flow",
                "controller.",
            ],
        },
    ),
    (
        "section-4.5",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send data on a stream at or beyond the final",
                "size.",
            ],
        },
    ),
    (
        "section-4.5",
        Feature {
            level: Should,
            quote: [
                "If a",
                "RESET_STREAM or STREAM frame is received indicating a change in the",
                "final size for the stream, an endpoint SHOULD respond with an error",
                "of type FINAL_SIZE_ERROR; see Section 11 for details on error",
                "handling.",
            ],
        },
    ),
    (
        "section-4.5",
        Feature {
            level: Should,
            quote: [
                "A receiver SHOULD treat receipt of data at or beyond the",
                "final size as an error of type FINAL_SIZE_ERROR, even after a stream",
                "is closed.",
            ],
        },
    ),
    (
        "section-4.6",
        Feature {
            level: Must,
            quote: [
                "If either is received, the connection MUST be closed",
                "immediately with a connection error of type TRANSPORT_PARAMETER_ERROR",
                "if the offending value was received in a transport parameter or of",
                "type FRAME_ENCODING_ERROR if it was received in a frame; see",
                "Section 10.2.",
            ],
        },
    ),
    (
        "section-4.6",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST NOT exceed the limit set by their peer.",
            ],
        },
    ),
    (
        "section-4.6",
        Feature {
            level: Must,
            quote: [
                "An endpoint",
                "that receives a frame with a stream ID exceeding the limit it has",
                "sent MUST treat this as a connection error of type",
                "STREAM_LIMIT_ERROR; see Section 11 for details on error handling.",
            ],
        },
    ),
    (
        "section-4.6",
        Feature {
            level: Must,
            quote: [
                "MAX_STREAMS frames",
                "that do not increase the stream limit MUST be ignored.",
            ],
        },
    ),
    (
        "section-4.6",
        Feature {
            level: Should,
            quote: [
                "An endpoint that is unable to open a new stream due to the peer's",
                "limits SHOULD send a STREAMS_BLOCKED frame (Section 19.14).",
            ],
        },
    ),
    (
        "section-4.6",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT wait",
                "to receive this signal before advertising additional credit, since",
                "doing so will mean that the peer will be blocked for at least an",
                "entire round trip, and potentially indefinitely if the peer chooses",
                "not to send STREAMS_BLOCKED frames.",
            ],
        },
    ),
    (
        "section-5.1",
        Feature {
            level: Must,
            quote: [
                "Connection IDs MUST NOT contain any information that can be used by",
                "an external observer (that is, one that does not cooperate with the",
                "issuer) to correlate them with other connection IDs for the same",
                "connection.",
            ],
        },
    ),
    (
        "section-5.1",
        Feature {
            level: Must,
            quote: [
                "As a trivial example, this means the same connection ID",
                "MUST NOT be issued more than once on the same connection.",
            ],
        },
    ),
    (
        "section-5.1",
        Feature {
            level: Must,
            quote: [
                "An",
                "endpoint MUST NOT use the same IP address and port for multiple",
                "concurrent connections with zero-length connection IDs, unless it is",
                "certain that those protocol features are not in use.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: Must,
            quote: [
                "The sequence number on",
                "each newly issued connection ID MUST increase by 1.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: Must,
            quote: [
                "When an endpoint issues a connection ID, it MUST accept packets that",
                "carry this connection ID for the duration of the connection or until",
                "its peer invalidates the connection ID via a RETIRE_CONNECTION_ID",
                "frame (Section 19.16).",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD ensure that its peer has a sufficient number of",
                "available and unused connection IDs.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT",
                "provide more connection IDs than the peer's limit.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY",
                "send connection IDs that temporarily exceed a peer's limit if the",
                "NEW_CONNECTION_ID frame also requires the retirement of any excess,",
                "by including a sufficiently large value in the Retire Prior To field.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: Must,
            quote: [
                "After processing a NEW_CONNECTION_ID frame and",
                "adding and retiring active connection IDs, if the number of active",
                "connection IDs exceeds the value advertised in its",
                "active_connection_id_limit transport parameter, an endpoint MUST",
                "close the connection with an error of type CONNECTION_ID_LIMIT_ERROR.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD supply a new connection ID when the peer retires a",
                "connection ID.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: May,
            quote: [
                "If an endpoint provided fewer connection IDs than the",
                "peer's active_connection_id_limit, it MAY supply a new connection ID",
                "when it receives a packet with a previously unused connection ID.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: May,
            quote: [
                "An",
                "endpoint MAY limit the total number of connection IDs issued for each",
                "connection to avoid the risk of running out of connection IDs; see",
                "Section 10.3.2.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY also limit the issuance of",
                "connection IDs to reduce the amount of per-path state it maintains,",
                "such as path validation status, as its peer might interact with it",
                "over as many paths as there are issued connection IDs.",
            ],
        },
    ),
    (
        "section-5.1.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint that initiates migration and requires non-zero-length",
                "connection IDs SHOULD ensure that the pool of connection IDs",
                "available to its peer allows the peer to use a new connection ID on",
                "migration, as the peer will be unable to respond if the pool is",
                "exhausted.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: Should,
            quote: [
                "Endpoints SHOULD retire connection IDs when",
                "they are no longer actively using either the local or destination",
                "address for which the connection ID was used.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: Should,
            quote: [
                "The endpoint SHOULD continue to",
                "accept the previously issued connection IDs until they are retired by",
                "the peer.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: May,
            quote: [
                "If the endpoint can no longer process the indicated",
                "connection IDs, it MAY close the connection.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: Must,
            quote: [
                "Upon receipt of an increased Retire Prior To field, the peer MUST",
                "stop using the corresponding connection IDs and retire them with",
                "RETIRE_CONNECTION_ID frames before adding the newly provided",
                "connection ID to the set of active connection IDs.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD limit the number of connection IDs it has retired",
                "locally for which RETIRE_CONNECTION_ID frames have not yet been",
                "acknowledged.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD allow for sending and tracking a",
                "number of RETIRE_CONNECTION_ID frames of at least twice the value of",
                "the active_connection_id_limit transport parameter.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST",
                "NOT forget a connection ID without retiring it, though it MAY choose",
                "to treat having connection IDs in need of retirement that exceed this",
                "limit as a connection error of type CONNECTION_ID_LIMIT_ERROR.",
            ],
        },
    ),
    (
        "section-5.1.2",
        Feature {
            level: Should,
            quote: [
                "Endpoints SHOULD NOT issue updates of the Retire Prior To field",
                "before receiving RETIRE_CONNECTION_ID frames that retire all",
                "connection IDs indicated by the previous Retire Prior To value.",
            ],
        },
    ),
    (
        "section-5.2",
        Feature {
            level: May,
            quote: [
                "Invalid packets that lack strong integrity protection, such as",
                "Initial, Retry, or Version Negotiation, MAY be discarded.",
            ],
        },
    ),
    (
        "section-5.2",
        Feature {
            level: Must,
            quote: [
                "An",
                "endpoint MUST generate a connection error if processing the contents",
                "of these packets prior to discovering an error, or fully revert any",
                "changes made during that processing.",
            ],
        },
    ),
    (
        "section-5.2.1",
        Feature {
            level: May,
            quote: [
                "The client MAY drop these packets, or it MAY buffer them in",
                "anticipation of later packets that allow it to compute the key.",
            ],
        },
    ),
    (
        "section-5.2.1",
        Feature {
            level: May,
            quote: [
                "The client MAY drop these packets, or it MAY buffer them in",
                "anticipation of later packets that allow it to compute the key.",
            ],
        },
    ),
    (
        "section-5.2.1",
        Feature {
            level: Must,
            quote: [
                "If a client receives a packet that uses a different version than it",
                "initially selected, it MUST discard that packet.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: Should,
            quote: [
                "If a server receives a packet that indicates an unsupported version",
                "and if the packet is large enough to initiate a new connection for",
                "any supported version, the server SHOULD send a Version Negotiation",
                "packet as described in Section 6.1.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: May,
            quote: [
                "A server MAY limit the number of",
                "packets to which it responds with a Version Negotiation packet.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: Must,
            quote: [
                "Servers MUST drop smaller packets that specify unsupported versions.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: Should,
            quote: [
                "Servers SHOULD respond with a Version",
                "Negotiation packet, provided that the datagram is sufficiently long.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: Should,
            quote: [
                "If a server refuses to accept a new connection, it SHOULD send an",
                "Initial packet containing a CONNECTION_CLOSE frame with error code",
                "CONNECTION_REFUSED.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: May,
            quote: [
                "If the packet is a 0-RTT packet, the server MAY buffer a limited",
                "number of these packets in anticipation of a late-arriving Initial",
                "packet.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: Should,
            quote: [
                "Clients are not able to send Handshake packets prior to",
                "receiving a server response, so servers SHOULD ignore any such",
                "packets.",
            ],
        },
    ),
    (
        "section-5.2.2",
        Feature {
            level: Must,
            quote: [
                "Servers MUST drop incoming packets under all other circumstances.",
            ],
        },
    ),
    (
        "section-5.2.3",
        Feature {
            level: Should,
            quote: [
                "A server in a deployment that does not implement a solution to",
                "maintain connection continuity when the client address changes SHOULD",
                "indicate that migration is not supported by using the",
                "disable_active_migration transport parameter.",
            ],
        },
    ),
    (
        "section-5.2.3",
        Feature {
            level: Must,
            quote: [
                "Server deployments that use this simple form of load balancing MUST",
                "avoid the creation of a stateless reset oracle; see Section 21.11.",
            ],
        },
    ),
    (
        "section-6",
        Feature {
            level: Should,
            quote: [
                "Clients that support",
                "multiple QUIC versions SHOULD ensure that the first UDP datagram they",
                "send is sized to the largest of the minimum datagram sizes from all",
                "versions they support, using PADDING frames (Section 19.1) as",
                "necessary.",
            ],
        },
    ),
    (
        "section-6.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send a Version Negotiation packet",
                "in response to receiving a Version Negotiation packet.",
            ],
        },
    ),
    (
        "section-6.1",
        Feature {
            level: May,
            quote: [
                "A server MAY limit the number of Version Negotiation packets it",
                "sends.",
            ],
        },
    ),
    (
        "section-6.2",
        Feature {
            level: Must,
            quote: [
                "A client that supports only this version of QUIC MUST abandon the",
                "current connection attempt if it receives a Version Negotiation",
                "packet, with the following two exceptions.",
            ],
        },
    ),
    (
        "section-6.2",
        Feature {
            level: Must,
            quote: [
                "A client MUST discard any",
                "Version Negotiation packet if it has received and successfully",
                "processed any other packet, including an earlier Version Negotiation",
                "packet.",
            ],
        },
    ),
    (
        "section-6.2",
        Feature {
            level: Must,
            quote: [
                "A client MUST discard a Version Negotiation packet that",
                "lists the QUIC version selected by the client.",
            ],
        },
    ),
    (
        "section-6.3",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY add reserved versions to any field where unknown or",
                "unsupported versions are ignored to test that a peer correctly",
                "ignores the value.",
            ],
        },
    ),
    (
        "section-6.3",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY send packets with a reserved version to test that a",
                "peer correctly discards the packet.",
            ],
        },
    ),
    (
        "section-7",
        Feature {
            level: Must,
            quote: [
                "The cryptographic handshake MUST",
                "provide the following properties:",
            ],
        },
    ),
    (
        "section-7",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST explicitly negotiate an application protocol.",
            ],
        },
    ),
    (
        "section-7.2",
        Feature {
            level: Must,
            quote: [
                "This Destination Connection ID MUST be at least 8 bytes in",
                "length.",
            ],
        },
    ),
    (
        "section-7.2",
        Feature {
            level: Must,
            quote: [
                "Until a packet is received from the server, the client MUST",
                "use the same Destination Connection ID value on all packets in this",
                "connection.",
            ],
        },
    ),
    (
        "section-7.2",
        Feature {
            level: Must,
            quote: [
                "Once a",
                "client has received a valid Initial packet from the server, it MUST",
                "discard any subsequent packet it receives on that connection with a",
                "different Source Connection ID.",
            ],
        },
    ),
    (
        "section-7.2",
        Feature {
            level: Must,
            quote: [
                "A client MUST change the Destination Connection ID it uses for",
                "sending packets in response to only the first received Initial or",
                "Retry packet.",
            ],
        },
    ),
    (
        "section-7.2",
        Feature {
            level: Must,
            quote: [
                "A server MUST set the Destination Connection ID it",
                "uses for sending packets based on the first received Initial packet.",
            ],
        },
    ),
    (
        "section-7.2",
        Feature {
            level: Must,
            quote: [
                "Any further changes to the Destination Connection ID are only",
                "permitted if the values are taken from NEW_CONNECTION_ID frames; if",
                "subsequent Initial packets include a different Source Connection ID,",
                "they MUST be discarded.",
            ],
        },
    ),
    (
        "section-7.3",
        Feature {
            level: Must,
            quote: [
                "The values provided by a peer for these transport parameters MUST",
                "match the values that an endpoint used in the Destination and Source",
                "Connection ID fields of Initial packets that it sent (and received,",
                "for servers).",
            ],
        },
    ),
    (
        "section-7.3",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST validate that received transport",
                "parameters match received connection ID values.",
            ],
        },
    ),
    (
        "section-7.3",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST treat the absence of the",
                "initial_source_connection_id transport parameter from either endpoint",
                "or the absence of the original_destination_connection_id transport",
                "parameter from the server as a connection error of type",
                "TRANSPORT_PARAMETER_ERROR.",
            ],
        },
    ),
    (
        "section-7.3",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST treat the following as a connection error of type",
                "TRANSPORT_PARAMETER_ERROR or PROTOCOL_VIOLATION:",
            ],
        },
    ),
    (
        "section-7.4",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST treat receipt of a transport parameter with an",
                "invalid value as a connection error of type",
                "TRANSPORT_PARAMETER_ERROR.",
            ],
        },
    ),
    (
        "section-7.4",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send a parameter more than once in a given",
                "transport parameters extension.",
            ],
        },
    ),
    (
        "section-7.4",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD treat receipt of",
                "duplicate transport parameters as a connection error of type",
                "TRANSPORT_PARAMETER_ERROR.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "The definition of a new transport parameter (Section 7.4.2) MUST",
                "specify whether storing the transport parameter for 0-RTT is",
                "mandatory, optional, or prohibited.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "A client MUST NOT use remembered values for the following parameters:",
                "ack_delay_exponent, max_ack_delay, initial_source_connection_id,",
                "original_destination_connection_id, preferred_address,",
                "retry_source_connection_id, and stateless_reset_token.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "The client",
                "MUST use the server's new values in the handshake instead; if the",
                "server does not provide new values, the default values are used.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "A client that attempts to send 0-RTT data MUST remember all other",
                "transport parameters used by the server that it is able to process.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "If 0-RTT data is accepted by the server, the server MUST NOT reduce",
                "any limits or alter any values that might be violated by the client",
                "with its 0-RTT data.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "In particular, a server that accepts 0-RTT data",
                "MUST NOT set values for the following parameters (Section 18.2) that",
                "are smaller than the remembered values of the parameters.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Should,
            quote: [
                "The applicable",
                "subset of transport parameters that permit the sending of application",
                "data SHOULD be set to non-zero values for 0-RTT.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: May,
            quote: [
                "A server MAY store and recover the previously sent values of the",
                "max_idle_timeout, max_udp_payload_size, and disable_active_migration",
                "parameters and reject 0-RTT if it selects smaller values.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "A server MUST reject 0-RTT data if the restored values for transport",
                "parameters cannot be supported.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "When sending frames in 0-RTT packets, a client MUST only use",
                "remembered transport parameters; importantly, it MUST NOT use updated",
                "values that it learns from the server's updated transport parameters",
                "or from frames received in 1-RTT packets.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: Must,
            quote: [
                "When sending frames in 0-RTT packets, a client MUST only use",
                "remembered transport parameters; importantly, it MUST NOT use updated",
                "values that it learns from the server's updated transport parameters",
                "or from frames received in 1-RTT packets.",
            ],
        },
    ),
    (
        "section-7.4.1",
        Feature {
            level: May,
            quote: [
                "A",
                "server MAY treat the use of updated transport parameters in 0-RTT as",
                "a connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-7.4.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST ignore transport parameters that it does",
                "not support.",
            ],
        },
    ),
    (
        "section-7.5",
        Feature {
            level: Must,
            quote: [
                "Implementations MUST support buffering at least 4096 bytes of data",
                "received in out-of-order CRYPTO frames.",
            ],
        },
    ),
    (
        "section-7.5",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY choose to",
                "allow more data to be buffered during the handshake.",
            ],
        },
    ),
    (
        "section-7.5",
        Feature {
            level: Must,
            quote: [
                "If an endpoint does not expand its buffer, it MUST close",
                "the connection with a CRYPTO_BUFFER_EXCEEDED error code.",
            ],
        },
    ),
    (
        "section-7.5",
        Feature {
            level: May,
            quote: [
                "Once the handshake completes, if an endpoint is unable to buffer all",
                "data in a CRYPTO frame, it MAY discard that CRYPTO frame and all",
                "CRYPTO frames received in the future, or it MAY close the connection",
                "with a CRYPTO_BUFFER_EXCEEDED error code.",
            ],
        },
    ),
    (
        "section-7.5",
        Feature {
            level: May,
            quote: [
                "Once the handshake completes, if an endpoint is unable to buffer all",
                "data in a CRYPTO frame, it MAY discard that CRYPTO frame and all",
                "CRYPTO frames received in the future, or it MAY close the connection",
                "with a CRYPTO_BUFFER_EXCEEDED error code.",
            ],
        },
    ),
    (
        "section-7.5",
        Feature {
            level: Must,
            quote: [
                "Packets containing",
                "discarded CRYPTO frames MUST be acknowledged because the packet has",
                "been received and processed by the transport even though the CRYPTO",
                "frame was discarded.",
            ],
        },
    ),
    (
        "section-8",
        Feature {
            level: Must,
            quote: [
                "Therefore, after receiving packets from an address that is",
                "not yet validated, an endpoint MUST limit the amount of data it sends",
                "to the unvalidated address to three times the amount of data received",
                "from that address.",
            ],
        },
    ),
    (
        "section-8.1",
        Feature {
            level: May,
            quote: [
                "Additionally, an endpoint MAY consider the peer address validated if",
                "the peer uses a connection ID chosen by the endpoint and the",
                "connection ID contains at least 64 bits of entropy.",
            ],
        },
    ),
    (
        "section-8.1",
        Feature {
            level: Must,
            quote: [
                "Prior to validating the client address, servers MUST NOT send more",
                "than three times as many bytes as the number of bytes they have",
                "received.",
            ],
        },
    ),
    (
        "section-8.1",
        Feature {
            level: Must,
            quote: [
                "For the purposes of",
                "avoiding amplification prior to address validation, servers MUST",
                "count all of the payload bytes received in datagrams that are",
                "uniquely attributed to a single connection.",
            ],
        },
    ),
    (
        "section-8.1",
        Feature {
            level: Must,
            quote: [
                "Clients MUST ensure that UDP datagrams containing Initial packets",
                "have UDP payloads of at least 1200 bytes, adding PADDING frames as",
                "necessary.",
            ],
        },
    ),
    (
        "section-8.1",
        Feature {
            level: Must,
            quote: [
                "To",
                "prevent this deadlock, clients MUST send a packet on a Probe Timeout",
                "(PTO); see Section 6.2 of [QUIC-RECOVERY].",
            ],
        },
    ),
    (
        "section-8.1",
        Feature {
            level: Must,
            quote: [
                "Specifically, the client",
                "MUST send an Initial packet in a UDP datagram that contains at least",
                "1200 bytes if it does not have Handshake keys, and otherwise send a",
                "Handshake packet.",
            ],
        },
    ),
    (
        "section-8.1.1",
        Feature {
            level: Must,
            quote: [
                "A token sent in a NEW_TOKEN frame or a Retry packet MUST be",
                "constructed in a way that allows the server to identify how it was",
                "provided to a client.",
            ],
        },
    ),
    (
        "section-8.1.2",
        Feature {
            level: Must,
            quote: [
                "This token MUST be repeated by the client in all",
                "Initial packets it sends for that connection after it receives the",
                "Retry packet.",
            ],
        },
    ),
    (
        "section-8.1.2",
        Feature {
            level: Should,
            quote: [
                "Instead, the",
                "server SHOULD immediately close (Section 10.2) the connection with an",
                "INVALID_TOKEN error.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: May,
            quote: [
                "A server MAY provide clients with an address validation token during",
                "one connection that can be used on a subsequent connection.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Must,
            quote: [
                "The client",
                "MUST include the token in all Initial packets it sends, unless a",
                "Retry replaces the token with a newer one.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Must,
            quote: [
                "The client MUST NOT use",
                "the token provided in a Retry for future connections.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: May,
            quote: [
                "Servers MAY",
                "discard any Initial packet that does not carry the expected token.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Should,
            quote: [
                "Thus, a token SHOULD have an",
                "expiration time, which could be either an explicit expiration time or",
                "an issued timestamp that can be used to dynamically calculate the",
                "expiration time.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Must,
            quote: [
                "A token issued with NEW_TOKEN MUST NOT include information that would",
                "allow values to be linked by an observer to the connection on which",
                "it was issued.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Must,
            quote: [
                "A server MUST ensure that every NEW_TOKEN frame it sends",
                "is unique across all clients, with the exception of those sent to",
                "repair losses of previously sent NEW_TOKEN frames.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: May,
            quote: [
                "Information that",
                "allows the server to distinguish between tokens from Retry and",
                "NEW_TOKEN MAY be accessible to entities other than the server.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Should,
            quote: [
                "When connecting to a server for",
                "which the client retains an applicable and unused token, it SHOULD",
                "include that token in the Token field of its Initial packet.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Must,
            quote: [
                "A client MUST NOT include",
                "a token that is not applicable to the server that it is connecting",
                "to, unless the client has the knowledge that the server that issued",
                "the token and the server the client is connecting to are jointly",
                "managing the tokens.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: May,
            quote: [
                "A client MAY use a token from any previous",
                "connection to that server.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Must,
            quote: [
                "In comparison, a",
                "token obtained in a Retry packet MUST be used immediately during the",
                "connection attempt and cannot be used in subsequent connection",
                "attempts.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Should,
            quote: [
                "A client SHOULD NOT reuse a token from a NEW_TOKEN frame for",
                "different connection attempts.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Must,
            quote: [
                "When a server receives an Initial packet with an address validation",
                "token, it MUST attempt to validate the token, unless it has already",
                "completed address validation.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Should,
            quote: [
                "If the token is invalid, then the",
                "server SHOULD proceed as if the client did not have a validated",
                "address, including potentially sending a Retry packet.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: Should,
            quote: [
                "If the validation succeeds, the server SHOULD then allow",
                "the handshake to proceed.",
            ],
        },
    ),
    (
        "section-8.1.3",
        Feature {
            level: May,
            quote: [
                "Clients MAY use tokens obtained on one connection for any connection",
                "attempt using the same version.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Must,
            quote: [
                "An address validation token MUST be difficult to guess.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Must,
            quote: [
                "For this design to work,",
                "the token MUST be covered by integrity protection against",
                "modification or falsification by clients.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Should,
            quote: [
                "Tokens",
                "sent in Retry packets SHOULD include information that allows the",
                "server to verify that the source IP address and port in client",
                "packets remain constant.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Must,
            quote: [
                "Tokens sent in NEW_TOKEN frames MUST include information that allows",
                "the server to verify that the client IP address has not changed from",
                "when the token was issued.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Must,
            quote: [
                "If the client IP address has changed, the",
                "server MUST adhere to the anti-amplification limit; see Section 8.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Must,
            quote: [
                "To protect against such attacks, servers MUST ensure that",
                "replay of tokens is prevented or limited.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Should,
            quote: [
                "Servers SHOULD ensure that",
                "tokens sent in Retry packets are only accepted for a short time, as",
                "they are returned immediately by clients.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: Should,
            quote: [
                "Tokens that are provided",
                "in NEW_TOKEN frames (Section 19.7) need to be valid for longer but",
                "SHOULD NOT be accepted multiple times.",
            ],
        },
    ),
    (
        "section-8.1.4",
        Feature {
            level: May,
            quote: [
                "Servers are encouraged to",
                "allow tokens to be used only once, if possible; tokens MAY include",
                "additional information about clients to further narrow applicability",
                "or reuse.",
            ],
        },
    ),
    (
        "section-8.2",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY include other frames with the PATH_CHALLENGE and",
                "PATH_RESPONSE frames used for path validation.",
            ],
        },
    ),
    (
        "section-8.2.1",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY send multiple PATH_CHALLENGE frames to guard against",
                "packet loss.",
            ],
        },
    ),
    (
        "section-8.2.1",
        Feature {
            level: Should,
            quote: [
                "However, an endpoint SHOULD NOT send multiple",
                "PATH_CHALLENGE frames in a single packet.",
            ],
        },
    ),
    (
        "section-8.2.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD NOT probe a new path with packets containing a",
                "PATH_CHALLENGE frame more frequently than it would send an Initial",
                "packet.",
            ],
        },
    ),
    (
        "section-8.2.1",
        Feature {
            level: Must,
            quote: [
                "The endpoint MUST use unpredictable data in every PATH_CHALLENGE",
                "frame so that it can associate the peer's response with the",
                "corresponding PATH_CHALLENGE.",
            ],
        },
    ),
    (
        "section-8.2.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST expand datagrams that contain a PATH_CHALLENGE frame",
                "to at least the smallest allowed maximum datagram size of 1200 bytes,",
                "unless the anti-amplification limit for the path does not permit",
                "sending a datagram of this size.",
            ],
        },
    ),
    (
        "section-8.2.1",
        Feature {
            level: Must,
            quote: [
                "To ensure that the path MTU is large enough, the endpoint",
                "MUST perform a second path validation by sending a PATH_CHALLENGE",
                "frame in a datagram of at least 1200 bytes.",
            ],
        },
    ),
    (
        "section-8.2.1",
        Feature {
            level: Must,
            quote: [
                "Unlike other cases where datagrams are expanded, endpoints MUST NOT",
                "discard datagrams that appear to be too small when they contain",
                "PATH_CHALLENGE or PATH_RESPONSE.",
            ],
        },
    ),
    (
        "section-8.2.2",
        Feature {
            level: Must,
            quote: [
                "On receiving a PATH_CHALLENGE frame, an endpoint MUST respond by",
                "echoing the data contained in the PATH_CHALLENGE frame in a",
                "PATH_RESPONSE frame.",
            ],
        },
    ),
    (
        "section-8.2.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT delay transmission of a",
                "packet containing a PATH_RESPONSE frame unless constrained by",
                "congestion control.",
            ],
        },
    ),
    (
        "section-8.2.2",
        Feature {
            level: Must,
            quote: [
                "A PATH_RESPONSE frame MUST be sent on the network path where the",
                "PATH_CHALLENGE frame was received.",
            ],
        },
    ),
    (
        "section-8.2.2",
        Feature {
            level: Must,
            quote: [
                "This requirement MUST NOT be enforced by the endpoint that initiates",
                "path validation, as that would enable an attack on migration; see",
                "Section 9.3.3.",
            ],
        },
    ),
    (
        "section-8.2.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST expand datagrams that contain a PATH_RESPONSE frame",
                "to at least the smallest allowed maximum datagram size of 1200 bytes.",
            ],
        },
    ),
    (
        "section-8.2.2",
        Feature {
            level: Must,
            quote: [
                "However, an endpoint MUST NOT expand the",
                "datagram containing the PATH_RESPONSE if the resulting data exceeds",
                "the anti-amplification limit.",
            ],
        },
    ),
    (
        "section-8.2.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send more than one PATH_RESPONSE frame in",
                "response to one PATH_CHALLENGE frame; see Section 13.3.",
            ],
        },
    ),
    (
        "section-8.2.3",
        Feature {
            level: Must,
            quote: [
                "However, the endpoint MUST initiate",
                "another path validation with an expanded datagram to verify that the",
                "path supports the required MTU.",
            ],
        },
    ),
    (
        "section-8.2.4",
        Feature {
            level: Should,
            quote: [
                "Endpoints SHOULD abandon path validation based on a timer.",
            ],
        },
    ),
    (
        "section-8.2.4",
        Feature {
            level: Should,
            quote: [
                "A value of",
                "three times the larger of the current PTO or the PTO for the new path",
                "(using kInitialRtt, as defined in [QUIC-RECOVERY]) is RECOMMENDED.",
            ],
        },
    ),
    (
        "section-8.2.4",
        Feature {
            level: May,
            quote: [
                "An endpoint",
                "that has no valid network path to its peer MAY signal this using the",
                "NO_VIABLE_PATH connection error, noting that this is only possible if",
                "the network path exists but does not support the required MTU",
                "(Section 14).",
            ],
        },
    ),
    (
        "section-9",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT initiate",
                "connection migration before the handshake is confirmed, as defined in",
                "Section 4.1.2 of [QUIC-TLS].",
            ],
        },
    ),
    (
        "section-9",
        Feature {
            level: Must,
            quote: [
                "If the peer sent the disable_active_migration transport parameter, an",
                "endpoint also MUST NOT send packets (including probing packets; see",
                "Section 9.1) from a different local address to the address the peer",
                "used during the handshake, unless the endpoint has acted on a",
                "preferred_address transport parameter from the peer.",
            ],
        },
    ),
    (
        "section-9",
        Feature {
            level: Must,
            quote: [
                "If the peer",
                "violates this requirement, the endpoint MUST either drop the incoming",
                "packets on that path without generating a Stateless Reset or proceed",
                "with path validation and allow the peer to migrate.",
            ],
        },
    ),
    (
        "section-9",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST",
                "perform path validation (Section 8.2) if it detects any change to a",
                "peer's address, unless it has previously validated that address.",
            ],
        },
    ),
    (
        "section-9",
        Feature {
            level: May,
            quote: [
                "When an endpoint has no validated path on which to send packets, it",
                "MAY discard connection state.",
            ],
        },
    ),
    (
        "section-9",
        Feature {
            level: May,
            quote: [
                "An endpoint capable of connection",
                "migration MAY wait for a new path to become available before",
                "discarding connection state.",
            ],
        },
    ),
    (
        "section-9",
        Feature {
            level: Must,
            quote: [
                "If a client receives",
                "packets from an unknown server address, the client MUST discard these",
                "packets.",
            ],
        },
    ),
    (
        "section-9.1",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY probe for peer reachability from a new local address",
                "using path validation (Section 8.2) prior to migrating the connection",
                "to the new local address.",
            ],
        },
    ),
    (
        "section-9.2",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY defer path",
                "validation until after a peer sends the next non-probing frame to its",
                "new address.",
            ],
        },
    ),
    (
        "section-9.3",
        Feature {
            level: Must,
            quote: [
                "If the recipient permits the migration, it MUST send subsequent",
                "packets to the new peer address and MUST initiate path validation",
                "(Section 8.2) to verify the peer's ownership of the address if",
                "validation is not already underway.",
            ],
        },
    ),
    (
        "section-9.3",
        Feature {
            level: Must,
            quote: [
                "If the recipient permits the migration, it MUST send subsequent",
                "packets to the new peer address and MUST initiate path validation",
                "(Section 8.2) to verify the peer's ownership of the address if",
                "validation is not already underway.",
            ],
        },
    ),
    (
        "section-9.3",
        Feature {
            level: Must,
            quote: [
                "An endpoint MAY send data to an unvalidated peer address, but it MUST",
                "protect against potential attacks as described in Sections 9.3.1 and",
                "9.3.2.",
            ],
        },
    ),
    (
        "section-9.3",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY skip validation of a peer address if that",
                "address has been seen recently.",
            ],
        },
    ),
    (
        "section-9.3",
        Feature {
            level: Should,
            quote: [
                "After verifying a new client address, the server SHOULD send new",
                "address validation tokens (Section 8) to the client.",
            ],
        },
    ),
    (
        "section-9.3.2",
        Feature {
            level: Must,
            quote: [
                "To protect the connection from failing due to such a spurious",
                "migration, an endpoint MUST revert to using the last validated peer",
                "address when validation of a new peer address fails.",
            ],
        },
    ),
    (
        "section-9.3.2",
        Feature {
            level: Must,
            quote: [
                "If an endpoint has no state about the last validated peer address, it",
                "MUST close the connection silently by discarding all connection",
                "state.",
            ],
        },
    ),
    (
        "section-9.3.2",
        Feature {
            level: May,
            quote: [
                "For instance, an endpoint MAY send a Stateless Reset in",
                "response to any further incoming packets.",
            ],
        },
    ),
    (
        "section-9.3.3",
        Feature {
            level: Must,
            quote: [
                "In response to an apparent migration, endpoints MUST validate the",
                "previously active path using a PATH_CHALLENGE frame.",
            ],
        },
    ),
    (
        "section-9.3.3",
        Feature {
            level: Should,
            quote: [
                "An endpoint that receives a PATH_CHALLENGE on an active path SHOULD",
                "send a non-probing packet in response.",
            ],
        },
    ),
    (
        "section-9.4",
        Feature {
            level: Must,
            quote: [
                "Packets sent on the old path MUST NOT contribute to",
                "congestion control or RTT estimation for the new path.",
            ],
        },
    ),
    (
        "section-9.4",
        Feature {
            level: Must,
            quote: [
                "On confirming a peer's ownership of its new address, an endpoint MUST",
                "immediately reset the congestion controller and round-trip time",
                "estimator for the new path to initial values (see Appendices A.3 and",
                "B.3 of [QUIC-RECOVERY]) unless the only change in the peer's address",
                "is its port number.",
            ],
        },
    ),
    (
        "section-9.4",
        Feature {
            level: May,
            quote: [
                "Because port-only changes are commonly the",
                "result of NAT rebinding or other middlebox activity, the endpoint MAY",
                "instead retain its congestion control state and round-trip estimate",
                "in those cases instead of reverting to initial values.",
            ],
        },
    ),
    (
        "section-9.4",
        Feature {
            level: Must,
            quote: [
                "This timer SHOULD be set as described in Section 6.2.1 of",
                "[QUIC-RECOVERY] and MUST NOT be more aggressive.",
            ],
        },
    ),
    (
        "section-9.5",
        Feature {
            level: May,
            quote: [
                "At any time, endpoints MAY change the Destination Connection ID they",
                "transmit with to a value that has not been used on another path.",
            ],
        },
    ),
    (
        "section-9.5",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT reuse a connection ID when sending from more",
                "than one local address -- for example, when initiating connection",
                "migration as described in Section 9.2 or when probing a new network",
                "path as described in Section 9.1.",
            ],
        },
    ),
    (
        "section-9.5",
        Feature {
            level: Must,
            quote: [
                "Similarly, an endpoint MUST NOT reuse a connection ID when sending to",
                "more than one destination address.",
            ],
        },
    ),
    (
        "section-9.5",
        Feature {
            level: May,
            quote: [
                "Due to network changes outside",
                "the control of its peer, an endpoint might receive packets from a new",
                "source address with the same Destination Connection ID field value,",
                "in which case it MAY continue to use the current connection ID with",
                "the new remote address while still sending from the same local",
                "address.",
            ],
        },
    ),
    (
        "section-9.5",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD NOT initiate migration with a peer that has",
                "requested a zero-length connection ID, because traffic over the new",
                "path might be trivially linkable to traffic over the old one.",
            ],
        },
    ),
    (
        "section-9.5",
        Feature {
            level: Should,
            quote: [
                "Changing address",
                "can cause a peer to reset its congestion control state (see",
                "Section 9.4), so addresses SHOULD only be changed infrequently.",
            ],
        },
    ),
    (
        "section-9.5",
        Feature {
            level: Should,
            quote: [
                "To ensure that migration is possible and",
                "packets sent on different paths cannot be correlated, endpoints",
                "SHOULD provide new connection IDs before peers migrate; see",
                "Section 5.1.1.",
            ],
        },
    ),
    (
        "section-9.6",
        Feature {
            level: Should,
            quote: [
                "If a",
                "client receives packets from a new server address when the client has",
                "not initiated a migration to that address, the client SHOULD discard",
                "these packets.",
            ],
        },
    ),
    (
        "section-9.6.1",
        Feature {
            level: May,
            quote: [
                "Servers MAY communicate a preferred address of each address family",
                "(IPv4 and IPv6) to allow clients to pick the one most suited to their",
                "network attachment.",
            ],
        },
    ),
    (
        "section-9.6.1",
        Feature {
            level: Should,
            quote: [
                "Once the handshake is confirmed, the client SHOULD select one of the",
                "two addresses provided by the server and initiate path validation",
                "(see Section 8.2).",
            ],
        },
    ),
    (
        "section-9.6.1",
        Feature {
            level: Should,
            quote: [
                "As soon as path validation succeeds, the client SHOULD begin sending",
                "all future packets to the new server address using the new connection",
                "ID and discontinue use of the old server address.",
            ],
        },
    ),
    (
        "section-9.6.1",
        Feature {
            level: Must,
            quote: [
                "If path validation",
                "fails, the client MUST continue sending all future packets to the",
                "server's original IP address.",
            ],
        },
    ),
    (
        "section-9.6.2",
        Feature {
            level: Must,
            quote: [
                "A client that migrates to a preferred address MUST validate the",
                "address it chooses before migrating; see Section 21.5.3.",
            ],
        },
    ),
    (
        "section-9.6.2",
        Feature {
            level: Must,
            quote: [
                "The server MUST send non-",
                "probing packets from its original address until it receives a non-",
                "probing packet from the client at its preferred address and until the",
                "server has validated the new path.",
            ],
        },
    ),
    (
        "section-9.6.2",
        Feature {
            level: Must,
            quote: [
                "The server MUST probe on the path toward the client from its",
                "preferred address.",
            ],
        },
    ),
    (
        "section-9.6.2",
        Feature {
            level: Should,
            quote: [
                "The server SHOULD drop",
                "newer packets for this connection that are received on the old IP",
                "address.",
            ],
        },
    ),
    (
        "section-9.6.2",
        Feature {
            level: May,
            quote: [
                "The server MAY continue to process delayed packets that are",
                "received on the old IP address.",
            ],
        },
    ),
    (
        "section-9.6.2",
        Feature {
            level: Must,
            quote: [
                "A client MUST NOT use these for other connections,",
                "including connections that are resumed from the current connection.",
            ],
        },
    ),
    (
        "section-9.6.3",
        Feature {
            level: Should,
            quote: [
                "In this case, the client",
                "SHOULD perform path validation to both the original and preferred",
                "server address from the client's new address concurrently.",
            ],
        },
    ),
    (
        "section-9.6.3",
        Feature {
            level: Must,
            quote: [
                "If path validation of the server's preferred address succeeds, the",
                "client MUST abandon validation of the original address and migrate to",
                "using the server's preferred address.",
            ],
        },
    ),
    (
        "section-9.6.3",
        Feature {
            level: May,
            quote: [
                "If path validation of the",
                "server's preferred address fails but validation of the server's",
                "original address succeeds, the client MAY migrate to its new address",
                "and continue sending to the server's original address.",
            ],
        },
    ),
    (
        "section-9.6.3",
        Feature {
            level: Must,
            quote: [
                "If packets received at the server's preferred address have a",
                "different source address than observed from the client during the",
                "handshake, the server MUST protect against potential attacks as",
                "described in Sections 9.3.1 and 9.3.2.",
            ],
        },
    ),
    (
        "section-9.6.3",
        Feature {
            level: Should,
            quote: [
                "Servers SHOULD initiate path validation to the client's new address",
                "upon receiving a probe packet from a different address; see",
                "Section 8.",
            ],
        },
    ),
    (
        "section-9.6.3",
        Feature {
            level: Should,
            quote: [
                "A client that migrates to a new address SHOULD use a preferred",
                "address from the same address family for the server.",
            ],
        },
    ),
    (
        "section-9.6.3",
        Feature {
            level: May,
            quote: [
                "This",
                "connection ID is provided to ensure that the client has a connection",
                "ID available for migration, but the client MAY use this connection ID",
                "on any path.",
            ],
        },
    ),
    (
        "section-9.7",
        Feature {
            level: Should,
            quote: [
                "Endpoints that send data using IPv6 SHOULD apply an IPv6 flow label",
                "in compliance with [RFC6437], unless the local API does not allow",
                "setting IPv6 flow labels.",
            ],
        },
    ),
    (
        "section-9.7",
        Feature {
            level: Must,
            quote: [
                "The flow label generation MUST be designed to minimize the chances of",
                "linkability with a previously used flow label, as a stable flow label",
                "would enable correlating activity on multiple paths; see Section 9.5.",
            ],
        },
    ),
    (
        "section-10",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY discard connection state if it does not have a",
                "validated path on which it can send packets; see Section 8.2.",
            ],
        },
    ),
    (
        "section-10.1",
        Feature {
            level: Must,
            quote: [
                "To avoid excessively small idle timeout periods, endpoints MUST",
                "increase the idle timeout period to be at least three times the",
                "current Probe Timeout (PTO).",
            ],
        },
    ),
    (
        "section-10.1.2",
        Feature {
            level: Should,
            quote: [
                "Application protocols that use QUIC SHOULD provide guidance on when",
                "deferring an idle timeout is appropriate.",
            ],
        },
    ),
    (
        "section-10.2",
        Feature {
            level: Should,
            quote: [
                "These states SHOULD persist for at least three",
                "times the current PTO interval as defined in [QUIC-RECOVERY].",
            ],
        },
    ),
    (
        "section-10.2",
        Feature {
            level: May,
            quote: [
                "Endpoints that have some alternative means to ensure that late-",
                "arriving packets do not induce a response, such as those that are",
                "able to close the UDP socket, MAY end these states earlier to allow",
                "for faster resource recovery.",
            ],
        },
    ),
    (
        "section-10.2",
        Feature {
            level: Should,
            quote: [
                "Servers that retain an open socket for",
                "accepting new connections SHOULD NOT end the closing or draining",
                "state early.",
            ],
        },
    ),
    (
        "section-10.2",
        Feature {
            level: Should,
            quote: [
                "Once its closing or draining state ends, an endpoint SHOULD discard",
                "all connection state.",
            ],
        },
    ),
    (
        "section-10.2",
        Feature {
            level: May,
            quote: [
                "The endpoint MAY send a Stateless Reset in",
                "response to any further incoming packets belonging to this",
                "connection.",
            ],
        },
    ),
    (
        "section-10.2.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD limit the rate at which it generates packets in",
                "the closing state.",
            ],
        },
    ),
    (
        "section-10.2.1",
        Feature {
            level: May,
            quote: [
                "An endpoint's selected connection ID and the QUIC version are",
                "sufficient information to identify packets for a closing connection;",
                "the endpoint MAY discard all other connection state.",
            ],
        },
    ),
    (
        "section-10.2.1",
        Feature {
            level: May,
            quote: [
                "An",
                "endpoint MAY retain packet protection keys for incoming packets to",
                "allow it to read and process a CONNECTION_CLOSE frame.",
            ],
        },
    ),
    (
        "section-10.2.1",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY drop packet protection keys when entering the closing",
                "state and send a packet containing a CONNECTION_CLOSE frame in",
                "response to any UDP datagram that is received.",
            ],
        },
    ),
    (
        "section-10.2.1",
        Feature {
            level: Must,
            quote: [
                "To avoid being used for an amplification attack,",
                "such endpoints MUST limit the cumulative size of packets it sends to",
                "three times the cumulative size of the packets that are received and",
                "attributed to the connection.",
            ],
        },
    ),
    (
        "section-10.2.1",
        Feature {
            level: May,
            quote: [
                "To minimize the state that an endpoint",
                "maintains for a closing connection, endpoints MAY send the exact same",
                "packet in response to any received packet.",
            ],
        },
    ),
    (
        "section-10.2.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint in the closing state MUST either discard",
                "packets received from an unvalidated address or limit the cumulative",
                "size of packets it sends to an unvalidated address to three times the",
                "size of packets it receives from that address.",
            ],
        },
    ),
    (
        "section-10.2.2",
        Feature {
            level: Must,
            quote: [
                "While otherwise identical to the closing state, an",
                "endpoint in the draining state MUST NOT send any packets.",
            ],
        },
    ),
    (
        "section-10.2.2",
        Feature {
            level: May,
            quote: [
                "An endpoint that receives a CONNECTION_CLOSE frame MAY send a single",
                "packet containing a CONNECTION_CLOSE frame before entering the",
                "draining state, using a NO_ERROR code if appropriate.",
            ],
        },
    ),
    (
        "section-10.2.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint",
                "MUST NOT send further packets.",
            ],
        },
    ),
    (
        "section-10.2.2",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY enter the draining state from the closing state if it",
                "receives a CONNECTION_CLOSE frame, which indicates that the peer is",
                "also closing or draining.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: Must,
            quote: [
                "After the handshake is confirmed (see",
                "Section 4.1.2 of [QUIC-TLS]), an endpoint MUST send any",
                "CONNECTION_CLOSE frames in a 1-RTT packet.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: May,
            quote: [
                "However, prior to",
                "confirming the handshake, it is possible that more advanced packet",
                "protection keys are not available to the peer, so another",
                "CONNECTION_CLOSE frame MAY be sent in a packet that uses a lower",
                "packet protection level.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: Should,
            quote: [
                "Under these",
                "circumstances, a server SHOULD send a CONNECTION_CLOSE frame in",
                "both Handshake and Initial packets to ensure that at least one of",
                "them is processable by the client.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: Should,
            quote: [
                "*  Prior to confirming the handshake, a peer might be unable to",
                "process 1-RTT packets, so an endpoint SHOULD send a",
                "CONNECTION_CLOSE frame in both Handshake and 1-RTT packets.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: Should,
            quote: [
                "A",
                "server SHOULD also send a CONNECTION_CLOSE frame in an Initial",
                "packet.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: Must,
            quote: [
                "A CONNECTION_CLOSE of type 0x1d MUST be replaced by a",
                "CONNECTION_CLOSE of type 0x1c when sending the frame in Initial or",
                "Handshake packets.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST clear the value of the",
                "Reason Phrase field and SHOULD use the APPLICATION_ERROR code when",
                "converting to a CONNECTION_CLOSE of type 0x1c.",
            ],
        },
    ),
    (
        "section-10.2.3",
        Feature {
            level: May,
            quote: [
                "For this",
                "reason, endpoints MAY discard packets rather than immediately close",
                "if errors are detected in packets that lack authentication.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: May,
            quote: [
                "An",
                "endpoint MAY send a Stateless Reset in response to receiving a packet",
                "that it cannot associate with an active connection.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Must,
            quote: [
                "An endpoint that wishes to communicate a fatal",
                "connection error MUST use a CONNECTION_CLOSE frame if it is able.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Should,
            quote: [
                "The remainder of the first byte",
                "and an arbitrary number of bytes following it are set to values that",
                "SHOULD be indistinguishable from random.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Should,
            quote: [
                "To achieve that end,",
                "the endpoint SHOULD ensure that all packets it sends are at least 22",
                "bytes longer than the minimum connection ID length that it requests",
                "the peer to include in its packets, adding PADDING frames as",
                "necessary.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Should,
            quote: [
                "An",
                "endpoint that sends a Stateless Reset in response to a packet that is",
                "43 bytes or shorter SHOULD send a Stateless Reset that is one byte",
                "shorter than the packet it responds to.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send a Stateless Reset that is three times or",
                "more larger than the packet it receives to avoid being used for",
                "amplification.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST discard packets that are too small to be valid QUIC",
                "packets.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST send Stateless Resets formatted as a packet with a",
                "short header.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: Must,
            quote: [
                "However, endpoints MUST treat any packet ending in a",
                "valid stateless reset token as a Stateless Reset, as other QUIC",
                "versions might allow the use of a long header.",
            ],
        },
    ),
    (
        "section-10.3",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY send a Stateless Reset in response to a packet with a",
                "long header.",
            ],
        },
    ),
    (
        "section-10.3.1",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY skip this check if any packet from a datagram is",
                "successfully processed.",
            ],
        },
    ),
    (
        "section-10.3.1",
        Feature {
            level: Must,
            quote: [
                "However, the comparison MUST be performed",
                "when the first packet in an incoming datagram either cannot be",
                "associated with a connection or cannot be decrypted.",
            ],
        },
    ),
    (
        "section-10.3.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT check for any stateless reset tokens associated",
                "with connection IDs it has not used or for connection IDs that have",
                "been retired.",
            ],
        },
    ),
    (
        "section-10.3.1",
        Feature {
            level: Must,
            quote: [
                "When comparing a datagram to stateless reset token values, endpoints",
                "MUST perform the comparison without leaking information about the",
                "value of the token.",
            ],
        },
    ),
    (
        "section-10.3.1",
        Feature {
            level: Must,
            quote: [
                "If the last 16 bytes of the datagram are identical in value to a",
                "stateless reset token, the endpoint MUST enter the draining period",
                "and not send any further packets on this connection.",
            ],
        },
    ),
    (
        "section-10.3.2",
        Feature {
            level: Must,
            quote: [
                "The stateless reset token MUST be difficult to guess.",
            ],
        },
    ),
    (
        "section-10.3.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint that uses this design MUST",
                "either use the same connection ID length for all connections or",
                "encode the length of the connection ID such that it can be recovered",
                "without state.",
            ],
        },
    ),
    (
        "section-10.3.2",
        Feature {
            level: Must,
            quote: [
                "This method for",
                "choosing the stateless reset token means that the combination of",
                "connection ID and static key MUST NOT be used for another connection.",
            ],
        },
    ),
    (
        "section-10.3.2",
        Feature {
            level: Must,
            quote: [
                "A connection ID from a connection",
                "that is reset by revealing the stateless reset token MUST NOT be",
                "reused for new connections at nodes that share a static key.",
            ],
        },
    ),
    (
        "section-10.3.2",
        Feature {
            level: Must,
            quote: [
                "The same stateless reset token MUST NOT be used for multiple",
                "connection IDs.",
            ],
        },
    ),
    (
        "section-10.3.2",
        Feature {
            level: May,
            quote: [
                "Endpoints are not required to compare new values",
                "against all previous values, but a duplicate value MAY be treated as",
                "a connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-10.3.3",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST ensure that every Stateless Reset that it sends is",
                "smaller than the packet that triggered it, unless it maintains state",
                "sufficient to prevent looping.",
            ],
        },
    ),
    (
        "section-11",
        Feature {
            level: Should,
            quote: [
                "An endpoint that detects an error SHOULD signal the existence of that",
                "error to its peer.",
            ],
        },
    ),
    (
        "section-11",
        Feature {
            level: Should,
            quote: [
                "The most appropriate error code (Section 20) SHOULD be included in",
                "the frame that signals the error.",
            ],
        },
    ),
    (
        "section-11",
        Feature {
            level: May,
            quote: [
                "In particular, an endpoint MAY use any applicable error",
                "code when it detects an error condition; a generic error code (such",
                "as PROTOCOL_VIOLATION or INTERNAL_ERROR) can always be used in place",
                "of specific error codes.",
            ],
        },
    ),
    (
        "section-11",
        Feature {
            level: Must,
            quote: [
                "A",
                "stateless reset MUST NOT be used by an endpoint that has the state",
                "necessary to send a frame on the connection.",
            ],
        },
    ),
    (
        "section-11.1",
        Feature {
            level: Must,
            quote: [
                "Errors that result in the connection being unusable, such as an",
                "obvious violation of protocol semantics or corruption of state that",
                "affects an entire connection, MUST be signaled using a",
                "CONNECTION_CLOSE frame (Section 19.19).",
            ],
        },
    ),
    (
        "section-11.1",
        Feature {
            level: Should,
            quote: [
                "An",
                "endpoint SHOULD be prepared to retransmit a packet containing a",
                "CONNECTION_CLOSE frame if it receives more packets on a terminated",
                "connection.",
            ],
        },
    ),
    (
        "section-11.1",
        Feature {
            level: May,
            quote: [
                "As the AEAD for Initial packets does not provide strong",
                "authentication, an endpoint MAY discard an invalid Initial packet.",
            ],
        },
    ),
    (
        "section-11.2",
        Feature {
            level: Must,
            quote: [
                "RESET_STREAM MUST only be instigated by the",
                "application protocol that uses QUIC.",
            ],
        },
    ),
    (
        "section-11.2",
        Feature {
            level: Should,
            quote: [
                "Application protocols SHOULD define rules for handling streams that",
                "are prematurely canceled by either endpoint.",
            ],
        },
    ),
    (
        "section-12.2",
        Feature {
            level: Must,
            quote: [
                "Receivers MUST be able to",
                "process coalesced packets.",
            ],
        },
    ),
    (
        "section-12.2",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD include multiple frames in a single packet if they",
                "are to be sent at the same encryption level, instead of coalescing",
                "multiple packets at the same encryption level.",
            ],
        },
    ),
    (
        "section-12.2",
        Feature {
            level: May,
            quote: [
                "Receivers MAY route based on the information in the first packet",
                "contained in a UDP datagram.",
            ],
        },
    ),
    (
        "section-12.2",
        Feature {
            level: Must,
            quote: [
                "Senders MUST NOT coalesce QUIC packets",
                "with different connection IDs into a single UDP datagram.",
            ],
        },
    ),
    (
        "section-12.2",
        Feature {
            level: Should,
            quote: [
                "Receivers",
                "SHOULD ignore any subsequent packets with a different Destination",
                "Connection ID than the first packet in the datagram.",
            ],
        },
    ),
    (
        "section-12.2",
        Feature {
            level: Must,
            quote: [
                "The receiver of coalesced QUIC packets MUST",
                "individually process each QUIC packet and separately acknowledge",
                "them, as if they were received as the payload of different UDP",
                "datagrams.",
            ],
        },
    ),
    (
        "section-12.2",
        Feature {
            level: Must,
            quote: [
                "For example, if decryption fails (because the keys are",
                "not available or for any other reason), the receiver MAY either",
                "discard or buffer the packet for later processing and MUST attempt to",
                "process the remaining packets.",
            ],
        },
    ),
    (
        "section-12.3",
        Feature {
            level: Must,
            quote: [
                "Subsequent packets sent in the same packet",
                "number space MUST increase the packet number by at least one.",
            ],
        },
    ),
    (
        "section-12.3",
        Feature {
            level: Must,
            quote: [
                "A QUIC endpoint MUST NOT reuse a packet number within the same packet",
                "number space in one connection.",
            ],
        },
    ),
    (
        "section-12.3",
        Feature {
            level: Must,
            quote: [
                "If the packet number for sending",
                "reaches 2^62-1, the sender MUST close the connection without sending",
                "a CONNECTION_CLOSE frame or any further packets; an endpoint MAY send",
                "a Stateless Reset (Section 10.3) in response to further packets that",
                "it receives.",
            ],
        },
    ),
    (
        "section-12.3",
        Feature {
            level: Must,
            quote: [
                "A receiver MUST discard a newly unprotected packet unless it is",
                "certain that it has not processed another packet with the same packet",
                "number from the same packet number space.",
            ],
        },
    ),
    (
        "section-12.3",
        Feature {
            level: Must,
            quote: [
                "Duplicate suppression MUST",
                "happen after removing packet protection for the reasons described in",
                "Section 9.5 of [QUIC-TLS].",
            ],
        },
    ),
    (
        "section-12.4",
        Feature {
            level: Must,
            quote: [
                "The payload of a packet that contains frames MUST contain at least",
                "one frame, and MAY contain multiple frames and multiple frame types.",
            ],
        },
    ),
    (
        "section-12.4",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST treat receipt of a packet containing no frames as a",
                "connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-12.4",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST treat",
                "receipt of a frame in a packet type that is not permitted as a",
                "connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-12.4",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST treat the receipt of a frame of unknown type as a",
                "connection error of type FRAME_ENCODING_ERROR.",
            ],
        },
    ),
    (
        "section-12.4",
        Feature {
            level: Must,
            quote: [
                "To ensure simple and efficient",
                "implementations of frame parsing, a frame type MUST use the shortest",
                "possible encoding.",
            ],
        },
    ),
    (
        "section-12.4",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY treat the",
                "receipt of a frame type that uses a longer encoding than necessary as",
                "a connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-12.5",
        Feature {
            level: May,
            quote: [
                "*  PADDING, PING, and CRYPTO frames MAY appear in any packet number",
                "space.",
            ],
        },
    ),
    (
        "section-12.5",
        Feature {
            level: May,
            quote: [
                "*  CONNECTION_CLOSE frames signaling errors at the QUIC layer (type",
                "0x1c) MAY appear in any packet number space.",
            ],
        },
    ),
    (
        "section-12.5",
        Feature {
            level: Must,
            quote: [
                "CONNECTION_CLOSE",
                "frames signaling application errors (type 0x1d) MUST only appear",
                "in the application data packet number space.",
            ],
        },
    ),
    (
        "section-12.5",
        Feature {
            level: May,
            quote: [
                "*  ACK frames MAY appear in any packet number space but can only",
                "acknowledge packets that appeared in that packet number space.",
            ],
        },
    ),
    (
        "section-12.5",
        Feature {
            level: Must,
            quote: [
                "*  All other frame types MUST only be sent in the application data",
                "packet number space.",
            ],
        },
    ),
    (
        "section-12.5",
        Feature {
            level: May,
            quote: [
                "A server MAY treat receipt",
                "of these frames in 0-RTT packets as a connection error of type",
                "PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-13",
        Feature {
            level: May,
            quote: [
                "A sender",
                "MAY wait for a short period of time to collect multiple frames before",
                "sending a packet that is not maximally packed, to avoid sending out",
                "large numbers of small packets.",
            ],
        },
    ),
    (
        "section-13",
        Feature {
            level: May,
            quote: [
                "An implementation MAY use knowledge",
                "about application sending behavior or heuristics to determine whether",
                "and for how long to wait.",
            ],
        },
    ),
    (
        "section-13.1",
        Feature {
            level: Must,
            quote: [
                "A packet MUST NOT be acknowledged until packet protection has been",
                "successfully removed and all frames contained in the packet have been",
                "processed.",
            ],
        },
    ),
    (
        "section-13.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD treat receipt of an acknowledgment for a packet it",
                "did not send as a connection error of type PROTOCOL_VIOLATION, if it",
                "is able to detect the condition.",
            ],
        },
    ),
    (
        "section-13.2",
        Feature {
            level: Should,
            quote: [
                "When sending a packet for any reason, an endpoint SHOULD attempt to",
                "include an ACK frame if one has not been sent recently.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Must,
            quote: [
                "Every packet SHOULD be acknowledged at least once, and ack-eliciting",
                "packets MUST be acknowledged at least once within the maximum delay",
                "an endpoint communicated using the max_ack_delay transport parameter;",
                "see Section 18.2.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST acknowledge all ack-eliciting Initial and Handshake",
                "packets immediately and all ack-eliciting 0-RTT and 1-RTT packets",
                "within its advertised max_ack_delay, with the following exception.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Must,
            quote: [
                "Since packets containing only ACK frames are not congestion",
                "controlled, an endpoint MUST NOT send more than one such packet in",
                "response to receiving an ack-eliciting packet.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send a non-ack-eliciting packet in response to a",
                "non-ack-eliciting packet, even if there are packet gaps that precede",
                "the received packet.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD",
                "send an ACK frame with other frames when there are new ack-eliciting",
                "packets to acknowledge.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: May,
            quote: [
                "When only non-ack-eliciting packets need to",
                "be acknowledged, an endpoint MAY choose not to send an ACK frame with",
                "outgoing frames until an ack-eliciting packet has been received.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Must,
            quote: [
                "In",
                "that case, an endpoint MUST NOT send an ack-eliciting frame in all",
                "packets that would otherwise be non-ack-eliciting, to avoid an",
                "infinite feedback loop of acknowledgments.",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Should,
            quote: [
                "In order to assist loss detection at the sender, an endpoint SHOULD",
                "generate and send an ACK frame without delay when it receives an ack-",
                "eliciting packet either:",
            ],
        },
    ),
    (
        "section-13.2.1",
        Feature {
            level: Should,
            quote: [
                "Similarly, packets marked with the ECN Congestion Experienced (CE)",
                "codepoint in the IP header SHOULD be acknowledged immediately, to",
                "reduce the peer's response time to congestion events.",
            ],
        },
    ),
    (
        "section-13.2.2",
        Feature {
            level: Should,
            quote: [
                "A receiver SHOULD send an ACK frame after receiving at least two ack-",
                "eliciting packets.",
            ],
        },
    ),
    (
        "section-13.2.2",
        Feature {
            level: May,
            quote: [
                "A receiver MAY process multiple available packets before determining",
                "whether to send an ACK frame in response.",
            ],
        },
    ),
    (
        "section-13.2.3",
        Feature {
            level: Should,
            quote: [
                "ACK frames SHOULD always acknowledge the most recently received",
                "packets, and the more out of order the packets are, the more",
                "important it is to send an updated ACK frame quickly, to prevent the",
                "peer from declaring a packet as lost and spuriously retransmitting",
                "the frames it contains.",
            ],
        },
    ),
    (
        "section-13.2.3",
        Feature {
            level: Should,
            quote: [
                "After receiving",
                "acknowledgments for an ACK frame, the receiver SHOULD stop tracking",
                "those acknowledged ACK Ranges.",
            ],
        },
    ),
    (
        "section-13.2.3",
        Feature {
            level: May,
            quote: [
                "Receivers MAY also limit ACK",
                "frame size further to preserve space for other frames or to limit the",
                "capacity that acknowledgments consume.",
            ],
        },
    ),
    (
        "section-13.2.3",
        Feature {
            level: Must,
            quote: [
                "A receiver MUST retain an ACK Range unless it can ensure that it will",
                "not subsequently accept packets with numbers in that range.",
            ],
        },
    ),
    (
        "section-13.2.3",
        Feature {
            level: Must,
            quote: [
                "Receivers can discard all ACK Ranges, but they MUST retain the",
                "largest packet number that has been successfully processed, as that",
                "is used to recover packet numbers from subsequent packets; see",
                "Section 17.1.",
            ],
        },
    ),
    (
        "section-13.2.3",
        Feature {
            level: Should,
            quote: [
                "A receiver SHOULD include an ACK Range containing the largest",
                "received packet number in every ACK frame.",
            ],
        },
    ),
    (
        "section-13.2.5",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT include delays that it",
                "does not control when populating the ACK Delay field in an ACK frame.",
            ],
        },
    ),
    (
        "section-13.2.5",
        Feature {
            level: Should,
            quote: [
                "However, endpoints SHOULD include buffering delays caused by",
                "unavailability of decryption keys, since these delays can be large",
                "and are likely to be non-repeating.",
            ],
        },
    ),
    (
        "section-13.2.5",
        Feature {
            level: Should,
            quote: [
                "When the measured acknowledgment delay is larger than its",
                "max_ack_delay, an endpoint SHOULD report the measured delay.",
            ],
        },
    ),
    (
        "section-13.2.6",
        Feature {
            level: Must,
            quote: [
                "ACK frames MUST only be carried in a packet that has the same packet",
                "number space as the packet being acknowledged; see Section 12.1.",
            ],
        },
    ),
    (
        "section-13.2.6",
        Feature {
            level: Must,
            quote: [
                "For",
                "instance, packets that are protected with 1-RTT keys MUST be",
                "acknowledged in packets that are also protected with 1-RTT keys.",
            ],
        },
    ),
    (
        "section-13.2.6",
        Feature {
            level: Must,
            quote: [
                "Packets that a client sends with 0-RTT packet protection MUST be",
                "acknowledged by the server in packets protected by 1-RTT keys.",
            ],
        },
    ),
    (
        "section-13.2.7",
        Feature {
            level: Should,
            quote: [
                "To",
                "avoid a deadlock, a sender SHOULD ensure that other frames are sent",
                "periodically in addition to PADDING frames to elicit acknowledgments",
                "from the receiver.",
            ],
        },
    ),
    (
        "section-13.3",
        Feature {
            level: Must,
            quote: [
                "The content of a RESET_STREAM frame MUST NOT change when it is",
                "sent again.",
            ],
        },
    ),
    (
        "section-13.3",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD stop sending",
                "MAX_STREAM_DATA frames when the receiving part of the stream",
                "enters a \"Size Known\" or \"Reset Recvd\" state.",
            ],
        },
    ),
    (
        "section-13.3",
        Feature {
            level: Must,
            quote: [
                "*  The HANDSHAKE_DONE frame MUST be retransmitted until it is",
                "acknowledged.",
            ],
        },
    ),
    (
        "section-13.3",
        Feature {
            level: Should,
            quote: [
                "Endpoints SHOULD prioritize retransmission of data over sending new",
                "data, unless priorities specified by the application indicate",
                "otherwise; see Section 2.3.",
            ],
        },
    ),
    (
        "section-13.3",
        Feature {
            level: Must,
            quote: [
                "A receiver MUST accept packets containing an",
                "outdated frame, such as a MAX_DATA frame carrying a smaller maximum",
                "data value than one found in an older packet.",
            ],
        },
    ),
    (
        "section-13.3",
        Feature {
            level: Should,
            quote: [
                "A sender SHOULD avoid retransmitting information from packets once",
                "they are acknowledged.",
            ],
        },
    ),
    (
        "section-13.3",
        Feature {
            level: Must,
            quote: [
                "Upon detecting losses, a sender MUST take appropriate congestion",
                "control action.",
            ],
        },
    ),
    (
        "section-13.4.1",
        Feature {
            level: Must,
            quote: [
                "Even if an endpoint does not set an ECT field in packets it sends,",
                "the endpoint MUST provide feedback about ECN markings it receives, if",
                "these are accessible.",
            ],
        },
    ),
    (
        "section-13.4.2",
        Feature {
            level: May,
            quote: [
                "Implementations MAY use other methods",
                "defined in RFCs; see [RFC8311].",
            ],
        },
    ),
    (
        "section-13.4.2.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT fail ECN validation as a result of",
                "processing an ACK frame that does not increase the largest",
                "acknowledged packet number.",
            ],
        },
    ),
    (
        "section-13.4.2.2",
        Feature {
            level: Must,
            quote: [
                "If validation fails, then the endpoint MUST disable ECN.",
            ],
        },
    ),
    (
        "section-13.4.2.2",
        Feature {
            level: May,
            quote: [
                "Even if validation fails, an endpoint MAY revalidate ECN for the same",
                "path at any later time in the connection.",
            ],
        },
    ),
    (
        "section-13.4.2.2",
        Feature {
            level: May,
            quote: [
                "Upon successful validation, an endpoint MAY continue to set an ECT",
                "codepoint in subsequent packets it sends, with the expectation that",
                "the path is ECN capable.",
            ],
        },
    ),
    (
        "section-13.4.2.2",
        Feature {
            level: Must,
            quote: [
                "Network routing and path elements can",
                "change mid-connection; an endpoint MUST disable ECN if validation",
                "later fails.",
            ],
        },
    ),
    (
        "section-14",
        Feature {
            level: Must,
            quote: [
                "QUIC MUST NOT be used if the network path cannot support a",
                "maximum datagram size of at least 1200 bytes.",
            ],
        },
    ),
    (
        "section-14",
        Feature {
            level: Must,
            quote: [
                "UDP datagrams MUST NOT be fragmented at the IP layer.",
            ],
        },
    ),
    (
        "section-14",
        Feature {
            level: Must,
            quote: [
                "In IPv4",
                "[IPv4], the Don't Fragment (DF) bit MUST be set if possible, to",
                "prevent fragmentation on the path.",
            ],
        },
    ),
    (
        "section-14",
        Feature {
            level: Must,
            quote: [
                "Therefore, an endpoint MUST NOT close a connection",
                "when it receives a datagram that does not meet size constraints; the",
                "endpoint MAY discard such datagrams.",
            ],
        },
    ),
    (
        "section-14.1",
        Feature {
            level: Must,
            quote: [
                "A client MUST expand the payload of all UDP datagrams carrying",
                "Initial packets to at least the smallest allowed maximum datagram",
                "size of 1200 bytes by adding PADDING frames to the Initial packet or",
                "by coalescing the Initial packet; see Section 12.2.",
            ],
        },
    ),
    (
        "section-14.1",
        Feature {
            level: Must,
            quote: [
                "Similarly, a server MUST expand the payload of all UDP",
                "datagrams carrying ack-eliciting Initial packets to at least the",
                "smallest allowed maximum datagram size of 1200 bytes.",
            ],
        },
    ),
    (
        "section-14.1",
        Feature {
            level: May,
            quote: [
                "Datagrams containing Initial packets MAY exceed 1200 bytes if the",
                "sender believes that the network path and peer both support the size",
                "that it chooses.",
            ],
        },
    ),
    (
        "section-14.1",
        Feature {
            level: Must,
            quote: [
                "A server MUST discard an Initial packet that is carried in a UDP",
                "datagram with a payload that is smaller than the smallest allowed",
                "maximum datagram size of 1200 bytes.",
            ],
        },
    ),
    (
        "section-14.1",
        Feature {
            level: May,
            quote: [
                "A server MAY also immediately",
                "close the connection by sending a CONNECTION_CLOSE frame with an",
                "error code of PROTOCOL_VIOLATION; see Section 10.2.3.",
            ],
        },
    ),
    (
        "section-14.1",
        Feature {
            level: Must,
            quote: [
                "The server MUST also limit the number of bytes it sends before",
                "validating the address of the client; see Section 8.",
            ],
        },
    ),
    (
        "section-14.2",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD use DPLPMTUD (Section 14.3) or PMTUD",
                "(Section 14.2.1) to determine whether the path to a destination will",
                "support a desired maximum datagram size without fragmentation.",
            ],
        },
    ),
    (
        "section-14.2",
        Feature {
            level: Should,
            quote: [
                "In",
                "the absence of these mechanisms, QUIC endpoints SHOULD NOT send",
                "datagrams larger than the smallest allowed maximum datagram size.",
            ],
        },
    ),
    (
        "section-14.2",
        Feature {
            level: Should,
            quote: [
                "All QUIC",
                "packets that are not sent in a PMTU probe SHOULD be sized to fit",
                "within the maximum datagram size to avoid the datagram being",
                "fragmented or dropped [RFC8085].",
            ],
        },
    ),
    (
        "section-14.2",
        Feature {
            level: Must,
            quote: [
                "If a QUIC endpoint determines that the PMTU between any pair of local",
                "and remote IP addresses cannot support the smallest allowed maximum",
                "datagram size of 1200 bytes, it MUST immediately cease sending QUIC",
                "packets, except for those in PMTU probes or those containing",
                "CONNECTION_CLOSE frames, on the affected path.",
            ],
        },
    ),
    (
        "section-14.2",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY",
                "terminate the connection if an alternative path cannot be found.",
            ],
        },
    ),
    (
        "section-14.2",
        Feature {
            level: Should,
            quote: [
                "QUIC implementations that implement any kind of PMTU discovery",
                "therefore SHOULD maintain a maximum datagram size for each",
                "combination of local and remote IP addresses.",
            ],
        },
    ),
    (
        "section-14.2",
        Feature {
            level: May,
            quote: [
                "A QUIC implementation MAY be more conservative in computing the",
                "maximum datagram size to allow for unknown tunnel overheads or IP",
                "header options/extensions.",
            ],
        },
    ),
    (
        "section-14.2.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST ignore an ICMP message that claims the PMTU has",
                "decreased below QUIC's smallest allowed maximum datagram size.",
            ],
        },
    ),
    (
        "section-14.2.1",
        Feature {
            level: Should,
            quote: [
                "QUIC endpoints using PMTUD SHOULD validate ICMP messages to protect",
                "from packet injection as specified in [RFC8201] and Section 5.2 of",
                "[RFC8085].",
            ],
        },
    ),
    (
        "section-14.2.1",
        Feature {
            level: Should,
            quote: [
                "This validation SHOULD use the quoted packet supplied in",
                "the payload of an ICMP message to associate the message with a",
                "corresponding transport connection (see Section 4.6.1 of [DPLPMTUD]).",
            ],
        },
    ),
    (
        "section-14.2.1",
        Feature {
            level: Must,
            quote: [
                "ICMP message validation MUST include matching IP addresses and UDP",
                "ports [RFC8085] and, when possible, connection IDs to an active QUIC",
                "session.",
            ],
        },
    ),
    (
        "section-14.2.1",
        Feature {
            level: Should,
            quote: [
                "The endpoint SHOULD ignore all ICMP messages that fail",
                "validation.",
            ],
        },
    ),
    (
        "section-14.2.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT increase the PMTU based on ICMP messages; see",
                "Item 6 in Section 3 of [DPLPMTUD].",
            ],
        },
    ),
    (
        "section-14.2.1",
        Feature {
            level: May,
            quote: [
                "Any reduction in QUIC's maximum",
                "datagram size in response to ICMP messages MAY be provisional until",
                "QUIC's loss detection algorithm determines that the quoted packet has",
                "actually been lost.",
            ],
        },
    ),
    (
        "section-14.3",
        Feature {
            level: Should,
            quote: [
                "Endpoints SHOULD set the initial value of BASE_PLPMTU (Section 5.1 of",
                "[DPLPMTUD]) to be consistent with QUIC's smallest allowed maximum",
                "datagram size.",
            ],
        },
    ),
    (
        "section-14.4",
        Feature {
            level: Should,
            quote: [
                "Loss of",
                "a QUIC packet that is carried in a PMTU probe is therefore not a",
                "reliable indication of congestion and SHOULD NOT trigger a congestion",
                "control reaction; see Item 7 in Section 3 of [DPLPMTUD].",
            ],
        },
    ),
    (
        "section-15",
        Feature {
            level: May,
            quote: [
                "A",
                "client or server MAY advertise support for any of these reserved",
                "versions.",
            ],
        },
    ),
    (
        "section-15",
        Feature {
            level: May,
            quote: [
                "Reserved version numbers will never represent a real protocol; a",
                "client MAY use one of these version numbers with the expectation that",
                "the server will initiate version negotiation; a server MAY advertise",
                "support for one of these versions and can expect that clients ignore",
                "the value.",
            ],
        },
    ),
    (
        "section-15",
        Feature {
            level: May,
            quote: [
                "Reserved version numbers will never represent a real protocol; a",
                "client MAY use one of these version numbers with the expectation that",
                "the server will initiate version negotiation; a server MAY advertise",
                "support for one of these versions and can expect that clients ignore",
                "the value.",
            ],
        },
    ),
    (
        "section-17.1",
        Feature {
            level: Must,
            quote: [
                "Prior to receiving an acknowledgment for a packet number space, the",
                "full packet number MUST be included; it is not to be truncated, as",
                "described below.",
            ],
        },
    ),
    (
        "section-17.1",
        Feature {
            level: Must,
            quote: [
                "After an acknowledgment is received for a packet number space, the",
                "sender MUST use a packet number size able to represent more than",
                "twice as large a range as the difference between the largest",
                "acknowledged packet number and the packet number being sent.",
            ],
        },
    ),
    (
        "section-17.1",
        Feature {
            level: Should,
            quote: [
                "An endpoint SHOULD",
                "use a large enough packet number encoding to allow the packet number",
                "to be recovered even if the packet arrives after packets that are",
                "sent afterwards.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Must,
            quote: [
                "Packets containing a zero",
                "value for this bit are not valid packets in this version and MUST",
                "be discarded.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Must,
            quote: [
                "In QUIC version 1, this value MUST NOT exceed",
                "20 bytes.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Must,
            quote: [
                "Endpoints that receive a version 1 long header with a",
                "value larger than 20 MUST drop the packet.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Should,
            quote: [
                "In order to properly",
                "form a Version Negotiation packet, servers SHOULD be able to read",
                "longer connection IDs from other QUIC versions.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Must,
            quote: [
                "In QUIC version 1, this value MUST NOT",
                "exceed 20 bytes.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Must,
            quote: [
                "Endpoints that receive a version 1 long header",
                "with a value larger than 20 MUST drop the packet.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Should,
            quote: [
                "In order to",
                "properly form a Version Negotiation packet, servers SHOULD be able",
                "to read longer connection IDs from other QUIC versions.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Must,
            quote: [
                "The value",
                "included prior to protection MUST be set to 0.",
            ],
        },
    ),
    (
        "section-17.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST",
                "treat receipt of a packet that has a non-zero value for these bits",
                "after removing both packet and header protection as a connection",
                "error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-17.2.1",
        Feature {
            level: Must,
            quote: [
                "Clients MUST ignore the value of this field.",
            ],
        },
    ),
    (
        "section-17.2.1",
        Feature {
            level: Should,
            quote: [
                "Where QUIC",
                "might be multiplexed with other protocols (see [RFC7983]), servers",
                "SHOULD set the most significant bit of this field (0x40) to 1 so that",
                "Version Negotiation packets appear to have the Fixed Bit field.",
            ],
        },
    ),
    (
        "section-17.2.1",
        Feature {
            level: Must,
            quote: [
                "The Version field of a Version Negotiation packet MUST be set to",
                "0x00000000.",
            ],
        },
    ),
    (
        "section-17.2.1",
        Feature {
            level: Must,
            quote: [
                "The server MUST include the value from the Source Connection ID field",
                "of the packet it receives in the Destination Connection ID field.",
            ],
        },
    ),
    (
        "section-17.2.1",
        Feature {
            level: Must,
            quote: [
                "The value for Source Connection ID MUST be copied from the",
                "Destination Connection ID of the received packet, which is initially",
                "randomly selected by a client.",
            ],
        },
    ),
    (
        "section-17.2.1",
        Feature {
            level: Must,
            quote: [
                "Version-",
                "specific rules for the connection ID therefore MUST NOT influence a",
                "decision about whether to send a Version Negotiation packet.",
            ],
        },
    ),
    (
        "section-17.2.1",
        Feature {
            level: Must,
            quote: [
                "A server MUST NOT send more than one Version Negotiation packet in",
                "response to a single UDP datagram.",
            ],
        },
    ),
    (
        "section-17.2.2",
        Feature {
            level: Must,
            quote: [
                "Initial packets sent by the server MUST set the Token Length field",
                "to 0; clients that receive an Initial packet with a non-zero Token",
                "Length field MUST either discard the packet or generate a",
                "connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-17.2.2",
        Feature {
            level: Must,
            quote: [
                "Initial packets sent by the server MUST set the Token Length field",
                "to 0; clients that receive an Initial packet with a non-zero Token",
                "Length field MUST either discard the packet or generate a",
                "connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-17.2.2",
        Feature {
            level: May,
            quote: [
                "A server MAY send multiple Initial packets.",
            ],
        },
    ),
    (
        "section-17.2.3",
        Feature {
            level: Should,
            quote: [
                "A client SHOULD attempt",
                "to resend data in 0-RTT packets after it sends a new Initial packet.",
            ],
        },
    ),
    (
        "section-17.2.3",
        Feature {
            level: Must,
            quote: [
                "New packet numbers MUST be used for any new packets that are sent; as",
                "described in Section 17.2.5.3, reusing packet numbers could",
                "compromise packet protection.",
            ],
        },
    ),
    (
        "section-17.2.3",
        Feature {
            level: Must,
            quote: [
                "A client MUST NOT send 0-RTT packets once it starts processing 1-RTT",
                "packets from the server.",
            ],
        },
    ),
    (
        "section-17.2.3",
        Feature {
            level: Must,
            quote: [
                "An acknowledgment for a 1-RTT",
                "packet MUST be carried in a 1-RTT packet.",
            ],
        },
    ),
    (
        "section-17.2.3",
        Feature {
            level: Should,
            quote: [
                "A server SHOULD treat a violation of remembered limits",
                "(Section 7.4.1) as a connection error of an appropriate type (for",
                "instance, a FLOW_CONTROL_ERROR for exceeding stream data limits).",
            ],
        },
    ),
    (
        "section-17.2.4",
        Feature {
            level: May,
            quote: [
                "Handshake packets MAY contain",
                "CONNECTION_CLOSE frames of type 0x1c.",
            ],
        },
    ),
    (
        "section-17.2.4",
        Feature {
            level: Must,
            quote: [
                "Endpoints MUST treat receipt",
                "of Handshake packets with other frames as a connection error of type",
                "PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-17.2.5",
        Feature {
            level: Must,
            quote: [
                "The value in",
                "the Unused field is set to an arbitrary value by the server; a client",
                "MUST ignore these bits.",
            ],
        },
    ),
    (
        "section-17.2.5.1",
        Feature {
            level: Must,
            quote: [
                "This value MUST NOT be equal to the Destination",
                "Connection ID field of the packet sent by the client.",
            ],
        },
    ),
    (
        "section-17.2.5.1",
        Feature {
            level: Must,
            quote: [
                "A client MUST",
                "discard a Retry packet that contains a Source Connection ID field",
                "that is identical to the Destination Connection ID field of its",
                "Initial packet.",
            ],
        },
    ),
    (
        "section-17.2.5.1",
        Feature {
            level: Must,
            quote: [
                "The client MUST use the value from the Source",
                "Connection ID field of the Retry packet in the Destination Connection",
                "ID field of subsequent packets that it sends.",
            ],
        },
    ),
    (
        "section-17.2.5.1",
        Feature {
            level: May,
            quote: [
                "A server MAY send Retry packets in response to Initial and 0-RTT",
                "packets.",
            ],
        },
    ),
    (
        "section-17.2.5.1",
        Feature {
            level: Must,
            quote: [
                "A server MUST NOT send more than one Retry",
                "packet in response to a single UDP datagram.",
            ],
        },
    ),
    (
        "section-17.2.5.2",
        Feature {
            level: Must,
            quote: [
                "A client MUST accept and process at most one Retry packet for each",
                "connection attempt.",
            ],
        },
    ),
    (
        "section-17.2.5.2",
        Feature {
            level: Must,
            quote: [
                "After the client has received and processed an",
                "Initial or Retry packet from the server, it MUST discard any",
                "subsequent Retry packets that it receives.",
            ],
        },
    ),
    (
        "section-17.2.5.2",
        Feature {
            level: Must,
            quote: [
                "Clients MUST discard Retry packets that have a Retry Integrity Tag",
                "that cannot be validated; see Section 5.8 of [QUIC-TLS].",
            ],
        },
    ),
    (
        "section-17.2.5.2",
        Feature {
            level: Must,
            quote: [
                "A client",
                "MUST discard a Retry packet with a zero-length Retry Token field.",
            ],
        },
    ),
    (
        "section-17.2.5.2",
        Feature {
            level: Must,
            quote: [
                "The",
                "client MUST NOT change the Source Connection ID because the server",
                "could include the connection ID as part of its token validation",
                "logic; see Section 8.1.4.",
            ],
        },
    ),
    (
        "section-17.2.5.3",
        Feature {
            level: Must,
            quote: [
                "A client MUST use the same",
                "cryptographic handshake message it included in this packet.",
            ],
        },
    ),
    (
        "section-17.2.5.3",
        Feature {
            level: May,
            quote: [
                "A server",
                "MAY treat a packet that contains a different cryptographic handshake",
                "message as a connection error or discard it.",
            ],
        },
    ),
    (
        "section-17.2.5.3",
        Feature {
            level: May,
            quote: [
                "A client MAY attempt 0-RTT after receiving a Retry packet by sending",
                "0-RTT packets to the connection ID provided by the server.",
            ],
        },
    ),
    (
        "section-17.2.5.3",
        Feature {
            level: Must,
            quote: [
                "A client MUST NOT reset the packet number for any packet number space",
                "after processing a Retry packet.",
            ],
        },
    ),
    (
        "section-17.2.5.3",
        Feature {
            level: May,
            quote: [
                "A server MAY abort the connection if it",
                "detects that the client reset the packet number.",
            ],
        },
    ),
    (
        "section-17.3.1",
        Feature {
            level: Must,
            quote: [
                "Packets",
                "containing a zero value for this bit are not valid packets in this",
                "version and MUST be discarded.",
            ],
        },
    ),
    (
        "section-17.3.1",
        Feature {
            level: Must,
            quote: [
                "The value included prior to",
                "protection MUST be set to 0.",
            ],
        },
    ),
    (
        "section-17.3.1",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST treat receipt of a",
                "packet that has a non-zero value for these bits, after removing",
                "both packet and header protection, as a connection error of type",
                "PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-17.4",
        Feature {
            level: May,
            quote: [
                "The spin bit is an OPTIONAL feature of this version of QUIC.",
            ],
        },
    ),
    (
        "section-17.4",
        Feature {
            level: Must,
            quote: [
                "An",
                "endpoint that does not support this feature MUST disable it, as",
                "defined below.",
            ],
        },
    ),
    (
        "section-17.4",
        Feature {
            level: Must,
            quote: [
                "Implementations MUST allow administrators",
                "of clients and servers to disable the spin bit either globally or on",
                "a per-connection basis.",
            ],
        },
    ),
    (
        "section-17.4",
        Feature {
            level: Must,
            quote: [
                "Even when the spin bit is not disabled by",
                "the administrator, endpoints MUST disable their use of the spin bit",
                "for a random selection of at least one in every 16 network paths, or",
                "for one in every 16 connection IDs, in order to ensure that QUIC",
                "connections that disable the spin bit are commonly observed on the",
                "network.",
            ],
        },
    ),
    (
        "section-17.4",
        Feature {
            level: Must,
            quote: [
                "When the spin bit is disabled, endpoints MAY set the spin bit to any",
                "value and MUST ignore any incoming value.",
            ],
        },
    ),
    (
        "section-17.4",
        Feature {
            level: Should,
            quote: [
                "It is RECOMMENDED that",
                "endpoints set the spin bit to a random value either chosen",
                "independently for each packet or chosen independently for each",
                "connection ID.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "This transport parameter MUST NOT be sent",
                "by a client but MAY be sent by a server.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Should,
            quote: [
                "This value",
                "SHOULD include the receiver's expected delays in alarms firing.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "An endpoint that receives this transport",
                "parameter MUST NOT use a new local address when sending to the",
                "address that the peer used during the handshake.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: May,
            quote: [
                "Servers MAY choose to only send a preferred address",
                "of one address family by sending an all-zero address and port",
                "(0.0.0.0:0 or [::]:0) for the other family.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "A server",
                "that chooses a zero-length connection ID MUST NOT provide a",
                "preferred address.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "Similarly, a server MUST NOT include a zero-",
                "length connection ID in this transport parameter.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "A client MUST",
                "treat a violation of these requirements as a connection error of",
                "type TRANSPORT_PARAMETER_ERROR.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "The value of the",
                "active_connection_id_limit parameter MUST be at least 2.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "An",
                "endpoint that receives a value less than 2 MUST close the",
                "connection with an error of type TRANSPORT_PARAMETER_ERROR.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "A client MUST NOT include any server-only transport parameter:",
                "original_destination_connection_id, preferred_address,",
                "retry_source_connection_id, or stateless_reset_token.",
            ],
        },
    ),
    (
        "section-18.2",
        Feature {
            level: Must,
            quote: [
                "A server MUST",
                "treat receipt of any of these transport parameters as a connection",
                "error of type TRANSPORT_PARAMETER_ERROR.",
            ],
        },
    ),
    (
        "section-19.3",
        Feature {
            level: Must,
            quote: [
                "QUIC implementations MUST properly handle both",
                "types, and, if they have enabled ECN for packets they send, they",
                "SHOULD use the information in the ECN section to manage their",
                "congestion state.",
            ],
        },
    ),
    (
        "section-19.3.1",
        Feature {
            level: Must,
            quote: [
                "If any computed packet number is negative, an endpoint MUST generate",
                "a connection error of type FRAME_ENCODING_ERROR.",
            ],
        },
    ),
    (
        "section-19.4",
        Feature {
            level: Must,
            quote: [
                "An endpoint that receives a RESET_STREAM frame for a send-only stream",
                "MUST terminate the connection with error STREAM_STATE_ERROR.",
            ],
        },
    ),
    (
        "section-19.5",
        Feature {
            level: Must,
            quote: [
                "Receiving a STOP_SENDING frame for a",
                "locally initiated stream that has not yet been created MUST be",
                "treated as a connection error of type STREAM_STATE_ERROR.",
            ],
        },
    ),
    (
        "section-19.5",
        Feature {
            level: Must,
            quote: [
                "An",
                "endpoint that receives a STOP_SENDING frame for a receive-only stream",
                "MUST terminate the connection with error STREAM_STATE_ERROR.",
            ],
        },
    ),
    (
        "section-19.6",
        Feature {
            level: Must,
            quote: [
                "Receipt of a frame that exceeds",
                "this limit MUST be treated as a connection error of type",
                "FRAME_ENCODING_ERROR or CRYPTO_BUFFER_EXCEEDED.",
            ],
        },
    ),
    (
        "section-19.7",
        Feature {
            level: Must,
            quote: [
                "The token MUST NOT be empty.",
            ],
        },
    ),
    (
        "section-19.7",
        Feature {
            level: Must,
            quote: [
                "A client MUST treat receipt",
                "of a NEW_TOKEN frame with an empty Token field as a connection",
                "error of type FRAME_ENCODING_ERROR.",
            ],
        },
    ),
    (
        "section-19.7",
        Feature {
            level: Must,
            quote: [
                "Clients MUST NOT send NEW_TOKEN frames.",
            ],
        },
    ),
    (
        "section-19.7",
        Feature {
            level: Must,
            quote: [
                "A server MUST treat receipt",
                "of a NEW_TOKEN frame as a connection error of type",
                "PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.8",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST terminate the connection with error",
                "STREAM_STATE_ERROR if it receives a STREAM frame for a locally",
                "initiated stream that has not yet been created, or for a send-only",
                "stream.",
            ],
        },
    ),
    (
        "section-19.8",
        Feature {
            level: Must,
            quote: [
                "Receipt of a frame that exceeds this limit",
                "MUST be treated as a connection error of type FRAME_ENCODING_ERROR or",
                "FLOW_CONTROL_ERROR.",
            ],
        },
    ),
    (
        "section-19.9",
        Feature {
            level: Must,
            quote: [
                "The sum of",
                "the final sizes on all streams -- including streams in terminal",
                "states -- MUST NOT exceed the value advertised by a receiver.",
            ],
        },
    ),
    (
        "section-19.9",
        Feature {
            level: Must,
            quote: [
                "An",
                "endpoint MUST terminate a connection with an error of type",
                "FLOW_CONTROL_ERROR if it receives more data than the maximum data",
                "value that it has sent.",
            ],
        },
    ),
    (
        "section-19.10",
        Feature {
            level: Must,
            quote: [
                "Receiving a MAX_STREAM_DATA frame for a locally",
                "initiated stream that has not yet been created MUST be treated as a",
                "connection error of type STREAM_STATE_ERROR.",
            ],
        },
    ),
    (
        "section-19.10",
        Feature {
            level: Must,
            quote: [
                "An endpoint that",
                "receives a MAX_STREAM_DATA frame for a receive-only stream MUST",
                "terminate the connection with error STREAM_STATE_ERROR.",
            ],
        },
    ),
    (
        "section-19.10",
        Feature {
            level: Must,
            quote: [
                "The data sent on a stream MUST NOT exceed the largest maximum stream",
                "data value advertised by the receiver.",
            ],
        },
    ),
    (
        "section-19.10",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST terminate a",
                "connection with an error of type FLOW_CONTROL_ERROR if it receives",
                "more data than the largest maximum stream data that it has sent for",
                "the affected stream.",
            ],
        },
    ),
    (
        "section-19.11",
        Feature {
            level: Must,
            quote: [
                "Receipt of a frame that",
                "permits opening of a stream larger than this limit MUST be treated",
                "as a connection error of type FRAME_ENCODING_ERROR.",
            ],
        },
    ),
    (
        "section-19.11",
        Feature {
            level: Must,
            quote: [
                "MAX_STREAMS frames that do not increase the stream limit MUST be",
                "ignored.",
            ],
        },
    ),
    (
        "section-19.11",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT open more streams than permitted by the current",
                "stream limit set by its peer.",
            ],
        },
    ),
    (
        "section-19.11",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST terminate a connection",
                "with an error of type STREAM_LIMIT_ERROR if a peer opens more streams",
                "than was permitted.",
            ],
        },
    ),
    (
        "section-19.12",
        Feature {
            level: Should,
            quote: [
                "A sender SHOULD send a DATA_BLOCKED frame (type=0x14) when it wishes",
                "to send data but is unable to do so due to connection-level flow",
                "control; see Section 4.",
            ],
        },
    ),
    (
        "section-19.13",
        Feature {
            level: Should,
            quote: [
                "A sender SHOULD send a STREAM_DATA_BLOCKED frame (type=0x15) when it",
                "wishes to send data but is unable to do so due to stream-level flow",
                "control.",
            ],
        },
    ),
    (
        "section-19.13",
        Feature {
            level: Must,
            quote: [
                "An endpoint that receives a STREAM_DATA_BLOCKED frame for a send-only",
                "stream MUST terminate the connection with error STREAM_STATE_ERROR.",
            ],
        },
    ),
    (
        "section-19.14",
        Feature {
            level: Should,
            quote: [
                "A sender SHOULD send a STREAMS_BLOCKED frame (type=0x16 or 0x17) when",
                "it wishes to open a stream but is unable to do so due to the maximum",
                "stream limit set by its peer; see Section 19.11.",
            ],
        },
    ),
    (
        "section-19.14",
        Feature {
            level: Must,
            quote: [
                "Receipt of a frame that encodes a larger",
                "stream ID MUST be treated as a connection error of type",
                "STREAM_LIMIT_ERROR or FRAME_ENCODING_ERROR.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "Values less than 1 and greater than 20 are invalid",
                "and MUST be treated as a connection error of type",
                "FRAME_ENCODING_ERROR.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "An endpoint MUST NOT send this frame if it currently requires that",
                "its peer send packets with a zero-length Destination Connection ID.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "An endpoint that is sending packets with a zero-length Destination",
                "Connection ID MUST treat receipt of a NEW_CONNECTION_ID frame as a",
                "connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "Receipt",
                "of the same frame multiple times MUST NOT be treated as a connection",
                "error.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: May,
            quote: [
                "If an endpoint receives a NEW_CONNECTION_ID frame that repeats a",
                "previously issued connection ID with a different Stateless Reset",
                "Token field value or a different Sequence Number field value, or if a",
                "sequence number is used for different connection IDs, the endpoint",
                "MAY treat that receipt as a connection error of type",
                "PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "The value in the Retire Prior To field",
                "MUST be less than or equal to the value in the Sequence Number field.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "Receiving a value in the Retire Prior To field that is greater than",
                "that in the Sequence Number field MUST be treated as a connection",
                "error of type FRAME_ENCODING_ERROR.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "A receiver",
                "MUST ignore any Retire Prior To fields that do not increase the",
                "largest received Retire Prior To value.",
            ],
        },
    ),
    (
        "section-19.15",
        Feature {
            level: Must,
            quote: [
                "An endpoint that receives a NEW_CONNECTION_ID frame with a sequence",
                "number smaller than the Retire Prior To field of a previously",
                "received NEW_CONNECTION_ID frame MUST send a corresponding",
                "RETIRE_CONNECTION_ID frame that retires the newly received connection",
                "ID, unless it has already done so for that sequence number.",
            ],
        },
    ),
    (
        "section-19.16",
        Feature {
            level: Must,
            quote: [
                "Receipt of a RETIRE_CONNECTION_ID frame containing a sequence number",
                "greater than any previously sent to the peer MUST be treated as a",
                "connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.16",
        Feature {
            level: Must,
            quote: [
                "The sequence number specified in a RETIRE_CONNECTION_ID frame MUST",
                "NOT refer to the Destination Connection ID field of the packet in",
                "which the frame is contained.",
            ],
        },
    ),
    (
        "section-19.16",
        Feature {
            level: May,
            quote: [
                "The peer MAY treat this as a",
                "connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.16",
        Feature {
            level: Must,
            quote: [
                "An endpoint that provides a zero-",
                "length connection ID MUST treat receipt of a RETIRE_CONNECTION_ID",
                "frame as a connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.17",
        Feature {
            level: Must,
            quote: [
                "The recipient of this frame MUST generate a PATH_RESPONSE frame",
                "(Section 19.18) containing the same Data value.",
            ],
        },
    ),
    (
        "section-19.18",
        Feature {
            level: May,
            quote: [
                "If the content of a PATH_RESPONSE frame does not match the content of",
                "a PATH_CHALLENGE frame previously sent by the endpoint, the endpoint",
                "MAY generate a connection error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.19",
        Feature {
            level: Should,
            quote: [
                "This SHOULD be a UTF-8 encoded",
                "string [RFC3629], though the frame does not carry information,",
                "such as language tags, that would aid comprehension by any entity",
                "other than the one that created the text.",
            ],
        },
    ),
    (
        "section-19.20",
        Feature {
            level: Must,
            quote: [
                "Servers MUST",
                "NOT send a HANDSHAKE_DONE frame before completing the handshake.",
            ],
        },
    ),
    (
        "section-19.20",
        Feature {
            level: Must,
            quote: [
                "A",
                "server MUST treat receipt of a HANDSHAKE_DONE frame as a connection",
                "error of type PROTOCOL_VIOLATION.",
            ],
        },
    ),
    (
        "section-19.21",
        Feature {
            level: Must,
            quote: [
                "An extension to QUIC that wishes to use a new type of frame MUST",
                "first ensure that a peer is able to understand the frame.",
            ],
        },
    ),
    (
        "section-19.21",
        Feature {
            level: Should,
            quote: [
                "Such extensions",
                "SHOULD define their interaction with previously defined extensions",
                "modifying the same protocol components.",
            ],
        },
    ),
    (
        "section-19.21",
        Feature {
            level: Must,
            quote: [
                "Extension frames MUST be congestion controlled and MUST cause an ACK",
                "frame to be sent.",
            ],
        },
    ),
    (
        "section-19.21",
        Feature {
            level: Must,
            quote: [
                "Extension frames MUST be congestion controlled and MUST cause an ACK",
                "frame to be sent.",
            ],
        },
    ),
    (
        "section-21.3",
        Feature {
            level: Should,
            quote: [
                "Servers SHOULD provide mitigations for this attack by limiting the",
                "usage and lifetime of address validation tokens; see Section 8.1.3.",
            ],
        },
    ),
    (
        "section-21.4",
        Feature {
            level: May,
            quote: [
                "An endpoint MAY skip packet numbers when sending",
                "packets to detect this behavior.",
            ],
        },
    ),
    (
        "section-21.5",
        Feature {
            level: Should,
            quote: [
                "QUIC",
                "servers SHOULD NOT be deployed in networks that do not deploy ingress",
                "filtering [BCP38] and also have inadequately secured UDP endpoints.",
            ],
        },
    ),
    (
        "section-21.5",
        Feature {
            level: Must,
            quote: [
                "Any future extension that allows server migration MUST",
                "also define countermeasures for forgery attacks.",
            ],
        },
    ),
    (
        "section-21.5.3",
        Feature {
            level: Must,
            quote: [
                "A client MUST NOT send non-probing frames to a preferred address",
                "prior to validating that address; see Section 8.",
            ],
        },
    ),
    (
        "section-21.5.6",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY prevent connection attempts or",
                "migration to a loopback address.",
            ],
        },
    ),
    (
        "section-21.5.6",
        Feature {
            level: Should,
            quote: [
                "Endpoints SHOULD NOT allow",
                "connections or migration to a loopback address if the same service",
                "was previously available at a different interface or if the address",
                "was provided by a service at a non-loopback address.",
            ],
        },
    ),
    (
        "section-21.5.6",
        Feature {
            level: Should,
            quote: [
                "Endpoints SHOULD NOT refuse to use",
                "an address unless they have specific knowledge about the network",
                "indicating that sending datagrams to unvalidated addresses in a given",
                "range is not safe.",
            ],
        },
    ),
    (
        "section-21.5.6",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY choose to reduce the risk of request forgery by not",
                "including values from NEW_TOKEN frames in Initial packets or by only",
                "sending probing frames in packets prior to completing address",
                "validation.",
            ],
        },
    ),
    (
        "section-21.5.6",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY",
                "choose to avoid sending datagrams to these ports or not send",
                "datagrams that match these patterns prior to validating the",
                "destination address.",
            ],
        },
    ),
    (
        "section-21.5.6",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY retire connection IDs containing",
                "patterns known to be problematic without using them.",
            ],
        },
    ),
    (
        "section-21.6",
        Feature {
            level: Should,
            quote: [
                "QUIC deployments SHOULD provide mitigations for the Slowloris",
                "attacks, such as increasing the maximum number of clients the server",
                "will allow, limiting the number of connections a single IP address is",
                "allowed to make, imposing restrictions on the minimum transfer speed",
                "a connection is allowed to have, and restricting the length of time",
                "an endpoint is allowed to stay connected.",
            ],
        },
    ),
    (
        "section-21.7",
        Feature {
            level: Should,
            quote: [
                "QUIC deployments SHOULD provide mitigations for stream fragmentation",
                "attacks.",
            ],
        },
    ),
    (
        "section-21.9",
        Feature {
            level: Should,
            quote: [
                "While there are legitimate uses for all messages, implementations",
                "SHOULD track cost of processing relative to progress and treat",
                "excessive quantities of any non-productive packets as indicative of",
                "an attack.",
            ],
        },
    ),
    (
        "section-21.9",
        Feature {
            level: May,
            quote: [
                "Endpoints MAY respond to this condition with a connection",
                "error or by dropping packets.",
            ],
        },
    ),
    (
        "section-21.11",
        Feature {
            level: Must,
            quote: [
                "To defend",
                "against this style of denial of service, endpoints that share a",
                "static key for stateless resets (see Section 10.3.2) MUST be arranged",
                "so that packets with a given connection ID always arrive at an",
                "instance that has connection state, unless that connection is no",
                "longer active.",
            ],
        },
    ),
    (
        "section-21.11",
        Feature {
            level: Must,
            quote: [
                "More generally, servers MUST NOT generate a stateless reset if a",
                "connection with the corresponding connection ID could be active on",
                "any endpoint using the same static key.",
            ],
        },
    ),
    (
        "section-21.12",
        Feature {
            level: Must,
            quote: [
                "Future",
                "versions of QUIC that use Version Negotiation packets MUST define a",
                "mechanism that is robust against version downgrade attacks.",
            ],
        },
    ),
    (
        "section-22.1.1",
        Feature {
            level: May,
            quote: [
                "Provisional registrations MAY omit the Specification and Notes",
                "fields, plus any additional fields that might be required for a",
                "permanent registration.",
            ],
        },
    ),
    (
        "section-22.1.2",
        Feature {
            level: Should,
            quote: [
                "New requests for codepoints from QUIC registries SHOULD use a",
                "randomly selected codepoint that excludes both existing allocations",
                "and the first unallocated codepoint in the selected space.",
            ],
        },
    ),
    (
        "section-22.1.2",
        Feature {
            level: May,
            quote: [
                "Requests",
                "for multiple codepoints MAY use a contiguous range.",
            ],
        },
    ),
    (
        "section-22.1.2",
        Feature {
            level: Should,
            quote: [
                "For codepoints that are encoded in variable-length integers",
                "(Section 16), such as frame types, codepoints that encode to four or",
                "eight bytes (that is, values 2^14 and above) SHOULD be used unless",
                "the usage is especially sensitive to having a longer encoding.",
            ],
        },
    ),
    (
        "section-22.1.2",
        Feature {
            level: May,
            quote: [
                "Applications to register codepoints in QUIC registries MAY include a",
                "requested codepoint as part of the registration.",
            ],
        },
    ),
    (
        "section-22.1.2",
        Feature {
            level: Must,
            quote: [
                "IANA MUST allocate",
                "the selected codepoint if the codepoint is unassigned and the",
                "requirements of the registration policy are met.",
            ],
        },
    ),
    (
        "section-22.1.3",
        Feature {
            level: Should,
            quote: [
                "This SHOULD be done only for the",
                "codepoints with the earliest recorded date, and entries that have",
                "been updated less than a year prior SHOULD NOT be reclaimed.",
            ],
        },
    ),
    (
        "section-22.1.3",
        Feature {
            level: Should,
            quote: [
                "This SHOULD be done only for the",
                "codepoints with the earliest recorded date, and entries that have",
                "been updated less than a year prior SHOULD NOT be reclaimed.",
            ],
        },
    ),
    (
        "section-22.1.3",
        Feature {
            level: Must,
            quote: [
                "A request to remove a codepoint MUST be reviewed by the designated",
                "experts.",
            ],
        },
    ),
    (
        "section-22.1.3",
        Feature {
            level: Must,
            quote: [
                "The experts MUST attempt to determine whether the codepoint",
                "is still in use.",
            ],
        },
    ),
    (
        "section-22.1.3",
        Feature {
            level: Must,
            quote: [
                "If any use of the codepoints is identified by this search or a",
                "request to update the registration is made, the codepoint MUST NOT be",
                "reclaimed.",
            ],
        },
    ),
    (
        "section-22.1.3",
        Feature {
            level: May,
            quote: [
                "If no use of the codepoint was identified and no request was made to",
                "update the registration, the codepoint MAY be removed from the",
                "registry.",
            ],
        },
    ),
    (
        "section-22.1.4",
        Feature {
            level: May,
            quote: [
                "The creation of a registry",
                "MAY specify additional constraints on permanent registrations.",
            ],
        },
    ),
    (
        "section-22.1.4",
        Feature {
            level: May,
            quote: [
                "The creation of a registry MAY identify a range of codepoints where",
                "registrations are governed by a different registration policy.",
            ],
        },
    ),
    (
        "section-22.1.4",
        Feature {
            level: Must,
            quote: [
                "All registrations made by Standards Track publications MUST be",
                "permanent.",
            ],
        },
    ),
    (
        "section-22.2",
        Feature {
            level: Must,
            quote: [
                "All codepoints that follow the pattern 0x?a?a?a?a are reserved, MUST",
                "NOT be assigned by IANA, and MUST NOT appear in the listing of",
                "assigned values.",
            ],
        },
    ),
    (
        "section-22.2",
        Feature {
            level: Must,
            quote: [
                "All codepoints that follow the pattern 0x?a?a?a?a are reserved, MUST",
                "NOT be assigned by IANA, and MUST NOT appear in the listing of",
                "assigned values.",
            ],
        },
    ),
    (
        "section-22.3",
        Feature {
            level: Must,
            quote: [
                "In addition to the fields listed in Section 22.1.1, permanent",
                "registrations in this registry MUST include the following field:",
            ],
        },
    ),
    (
        "section-22.3",
        Feature {
            level: Must,
            quote: [
                "Each value of the form \"31 * N + 27\" for integer values of N (that",
                "is, 27, 58, 89, ...) are reserved; these values MUST NOT be assigned",
                "by IANA and MUST NOT appear in the listing of assigned values.",
            ],
        },
    ),
    (
        "section-22.3",
        Feature {
            level: Must,
            quote: [
                "Each value of the form \"31 * N + 27\" for integer values of N (that",
                "is, 27, 58, 89, ...) are reserved; these values MUST NOT be assigned",
                "by IANA and MUST NOT appear in the listing of assigned values.",
            ],
        },
    ),
    (
        "section-22.4",
        Feature {
            level: Must,
            quote: [
                "In addition to the fields listed in Section 22.1.1, permanent",
                "registrations in this registry MUST include the following field:",
            ],
        },
    ),
    (
        "section-22.4",
        Feature {
            level: Should,
            quote: [
                "In addition to the advice in Section 22.1, specifications for new",
                "permanent registrations SHOULD describe the means by which an",
                "endpoint might determine that it can send the identified type of",
                "frame.",
            ],
        },
    ),
    (
        "section-22.5",
        Feature {
            level: Must,
            quote: [
                "In addition to the fields listed in Section 22.1.1, permanent",
                "registrations in this registry MUST include the following fields:",
            ],
        },
    ),
    (
        "section-22.5",
        Feature {
            level: May,
            quote: [
                "Description:  A brief description of the error code semantics, which",
                "MAY be a summary if a specification reference is provided.",
            ],
        },
    ),
]
